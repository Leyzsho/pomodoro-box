/*! For license information please see index.c299aab4d345a6ebb431.js.LICENSE.txt */
var __webpack_modules__={854:function(t,e,n){t.exports=function(){"use strict";var t=function(t){var e=t.id,n=t.viewBox,r=t.content;this.id=e,this.viewBox=n,this.content=r};t.prototype.stringify=function(){return this.content},t.prototype.toString=function(){return this.stringify()},t.prototype.destroy=function(){var t=this;["id","viewBox","content"].forEach((function(e){return delete t[e]}))};var e=function(t){var e=!!document.importNode,n=(new DOMParser).parseFromString(t,"image/svg+xml").documentElement;return e?document.importNode(n,!0):n};function r(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self&&self;var i=r((function(t,e){!function(e,n){t.exports=n()}(0,(function(){function t(t){return t&&"object"==typeof t&&"[object RegExp]"!==Object.prototype.toString.call(t)&&"[object Date]"!==Object.prototype.toString.call(t)}function e(t){return Array.isArray(t)?[]:{}}function n(n,r){return r&&!0===r.clone&&t(n)?o(e(n),n,r):n}function r(e,r,i){var a=e.slice();return r.forEach((function(r,s){void 0===a[s]?a[s]=n(r,i):t(r)?a[s]=o(e[s],r,i):-1===e.indexOf(r)&&a.push(n(r,i))})),a}function i(e,r,i){var a={};return t(e)&&Object.keys(e).forEach((function(t){a[t]=n(e[t],i)})),Object.keys(r).forEach((function(s){t(r[s])&&e[s]?a[s]=o(e[s],r[s],i):a[s]=n(r[s],i)})),a}function o(t,e,o){var a=Array.isArray(e),s=(o||{arrayMerge:r}).arrayMerge||r;return a?Array.isArray(t)?s(t,e,o):n(e,o):i(t,e,o)}return o.all=function(t,e){if(!Array.isArray(t)||t.length<2)throw new Error("first argument should be an array with at least two elements");return t.reduce((function(t,n){return o(t,n,e)}))},o}))})),o=r((function(t,e){var n={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}};e.default=n,t.exports=e.default})),a=function(t){return Object.keys(t).map((function(e){return e+'="'+t[e].toString().replace(/"/g,"&quot;")+'"'})).join(" ")},s=o.svg,u=o.xlink,c={};c[s.name]=s.uri,c[u.name]=u.uri;var l=function(t,e){void 0===t&&(t="");var n=i(c,e||{});return"<svg "+a(n)+">"+t+"</svg>"},f=function(t){function n(){t.apply(this,arguments)}t&&(n.__proto__=t),n.prototype=Object.create(t&&t.prototype),n.prototype.constructor=n;var r={isMounted:{}};return r.isMounted.get=function(){return!!this.node},n.createFromExistingNode=function(t){return new n({id:t.getAttribute("id"),viewBox:t.getAttribute("viewBox"),content:t.outerHTML})},n.prototype.destroy=function(){this.isMounted&&this.unmount(),t.prototype.destroy.call(this)},n.prototype.mount=function(t){if(this.isMounted)return this.node;var e="string"==typeof t?document.querySelector(t):t,n=this.render();return this.node=n,e.appendChild(n),n},n.prototype.render=function(){var t=this.stringify();return e(l(t)).childNodes[0]},n.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(n.prototype,r),n}(t);return f}()},348:function(t,e,n){t.exports=function(){"use strict";function t(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self&&self;var e=t((function(t,e){!function(e,n){t.exports=n()}(0,(function(){function t(t){return t&&"object"==typeof t&&"[object RegExp]"!==Object.prototype.toString.call(t)&&"[object Date]"!==Object.prototype.toString.call(t)}function e(t){return Array.isArray(t)?[]:{}}function n(n,r){return r&&!0===r.clone&&t(n)?o(e(n),n,r):n}function r(e,r,i){var a=e.slice();return r.forEach((function(r,s){void 0===a[s]?a[s]=n(r,i):t(r)?a[s]=o(e[s],r,i):-1===e.indexOf(r)&&a.push(n(r,i))})),a}function i(e,r,i){var a={};return t(e)&&Object.keys(e).forEach((function(t){a[t]=n(e[t],i)})),Object.keys(r).forEach((function(s){t(r[s])&&e[s]?a[s]=o(e[s],r[s],i):a[s]=n(r[s],i)})),a}function o(t,e,o){var a=Array.isArray(e),s=(o||{arrayMerge:r}).arrayMerge||r;return a?Array.isArray(t)?s(t,e,o):n(e,o):i(t,e,o)}return o.all=function(t,e){if(!Array.isArray(t)||t.length<2)throw new Error("first argument should be an array with at least two elements");return t.reduce((function(t,n){return o(t,n,e)}))},o}))}));function r(t){return t=t||Object.create(null),{on:function(e,n){(t[e]||(t[e]=[])).push(n)},off:function(e,n){t[e]&&t[e].splice(t[e].indexOf(n)>>>0,1)},emit:function(e,n){(t[e]||[]).map((function(t){t(n)})),(t["*"]||[]).map((function(t){t(e,n)}))}}}var i=t((function(t,e){var n={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}};e.default=n,t.exports=e.default})),o=function(t){return Object.keys(t).map((function(e){return e+'="'+t[e].toString().replace(/"/g,"&quot;")+'"'})).join(" ")},a=i.svg,s=i.xlink,u={};u[a.name]=a.uri,u[s.name]=s.uri;var c,l=function(t,n){void 0===t&&(t="");var r=e(u,n||{});return"<svg "+o(r)+">"+t+"</svg>"},f=i.svg,d=i.xlink,p={attrs:(c={style:["position: absolute","width: 0","height: 0"].join("; "),"aria-hidden":"true"},c[f.name]=f.uri,c[d.name]=d.uri,c)},h=function(t){this.config=e(p,t||{}),this.symbols=[]};h.prototype.add=function(t){var e=this.symbols,n=this.find(t.id);return n?(e[e.indexOf(n)]=t,!1):(e.push(t),!0)},h.prototype.remove=function(t){var e=this.symbols,n=this.find(t);return!!n&&(e.splice(e.indexOf(n),1),n.destroy(),!0)},h.prototype.find=function(t){return this.symbols.filter((function(e){return e.id===t}))[0]||null},h.prototype.has=function(t){return null!==this.find(t)},h.prototype.stringify=function(){var t=this.config.attrs,e=this.symbols.map((function(t){return t.stringify()})).join("");return l(e,t)},h.prototype.toString=function(){return this.stringify()},h.prototype.destroy=function(){this.symbols.forEach((function(t){return t.destroy()}))};var m=function(t){var e=t.id,n=t.viewBox,r=t.content;this.id=e,this.viewBox=n,this.content=r};m.prototype.stringify=function(){return this.content},m.prototype.toString=function(){return this.stringify()},m.prototype.destroy=function(){var t=this;["id","viewBox","content"].forEach((function(e){return delete t[e]}))};var g=function(t){var e=!!document.importNode,n=(new DOMParser).parseFromString(t,"image/svg+xml").documentElement;return e?document.importNode(n,!0):n},_=function(t){function e(){t.apply(this,arguments)}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},e.createFromExistingNode=function(t){return new e({id:t.getAttribute("id"),viewBox:t.getAttribute("viewBox"),content:t.outerHTML})},e.prototype.destroy=function(){this.isMounted&&this.unmount(),t.prototype.destroy.call(this)},e.prototype.mount=function(t){if(this.isMounted)return this.node;var e="string"==typeof t?document.querySelector(t):t,n=this.render();return this.node=n,e.appendChild(n),n},e.prototype.render=function(){var t=this.stringify();return g(l(t)).childNodes[0]},e.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(e.prototype,n),e}(m),v={autoConfigure:!0,mountTo:"body",syncUrlsWithBaseTag:!1,listenLocationChangeEvent:!0,locationChangeEvent:"locationChange",locationChangeAngularEmitter:!1,usagesToUpdate:"use[*|href]",moveGradientsOutsideSymbol:!1},y=function(t){return Array.prototype.slice.call(t,0)},b={isChrome:function(){return/chrome/i.test(navigator.userAgent)},isFirefox:function(){return/firefox/i.test(navigator.userAgent)},isIE:function(){return/msie/i.test(navigator.userAgent)||/trident/i.test(navigator.userAgent)},isEdge:function(){return/edge/i.test(navigator.userAgent)}},w=function(t,e){var n=document.createEvent("CustomEvent");n.initCustomEvent(t,!1,!1,e),window.dispatchEvent(n)},T=function(t){var e=[];return y(t.querySelectorAll("style")).forEach((function(t){t.textContent+="",e.push(t)})),e},k=function(t){return(t||window.location.href).split("#")[0]},x=function(t){angular.module("ng").run(["$rootScope",function(e){e.$on("$locationChangeSuccess",(function(e,n,r){w(t,{oldUrl:r,newUrl:n})}))}])},E="linearGradient, radialGradient, pattern, mask, clipPath",S=function(t,e){return void 0===e&&(e=E),y(t.querySelectorAll("symbol")).forEach((function(t){y(t.querySelectorAll(e)).forEach((function(e){t.parentNode.insertBefore(e,t)}))})),t};function O(t,e){return y(t).reduce((function(t,n){if(!n.attributes)return t;var r=y(n.attributes),i=e?r.filter(e):r;return t.concat(i)}),[])}var B=i.xlink.uri,C="xlink:href",A=/[{}|\\\^\[\]`"<>]/g;function I(t){return t.replace(A,(function(t){return"%"+t[0].charCodeAt(0).toString(16).toUpperCase()}))}function M(t){return t.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function L(t,e,n){return y(t).forEach((function(t){var r=t.getAttribute(C);if(r&&0===r.indexOf(e)){var i=r.replace(e,n);t.setAttributeNS(B,C,i)}})),t}var R,D=["clipPath","colorProfile","src","cursor","fill","filter","marker","markerStart","markerMid","markerEnd","mask","stroke","style"],N=D.map((function(t){return"["+t+"]"})).join(","),P=function(t,e,n,r){var i=I(n),o=I(r);O(t.querySelectorAll(N),(function(t){var e=t.localName,n=t.value;return-1!==D.indexOf(e)&&-1!==n.indexOf("url("+i)})).forEach((function(t){return t.value=t.value.replace(new RegExp(M(i),"g"),o)})),L(e,i,o)},F={MOUNT:"mount",SYMBOL_MOUNT:"symbol_mount"},j=function(t){function n(n){var i=this;void 0===n&&(n={}),t.call(this,e(v,n));var o=r();this._emitter=o,this.node=null;var a=this.config;if(a.autoConfigure&&this._autoConfigure(n),a.syncUrlsWithBaseTag){var s=document.getElementsByTagName("base")[0].getAttribute("href");o.on(F.MOUNT,(function(){return i.updateUrls("#",s)}))}var u=this._handleLocationChange.bind(this);this._handleLocationChange=u,a.listenLocationChangeEvent&&window.addEventListener(a.locationChangeEvent,u),a.locationChangeAngularEmitter&&x(a.locationChangeEvent),o.on(F.MOUNT,(function(t){a.moveGradientsOutsideSymbol&&S(t)})),o.on(F.SYMBOL_MOUNT,(function(t){a.moveGradientsOutsideSymbol&&S(t.parentNode),(b.isIE()||b.isEdge())&&T(t)}))}t&&(n.__proto__=t),n.prototype=Object.create(t&&t.prototype),n.prototype.constructor=n;var i={isMounted:{}};return i.isMounted.get=function(){return!!this.node},n.prototype._autoConfigure=function(t){var e=this.config;void 0===t.syncUrlsWithBaseTag&&(e.syncUrlsWithBaseTag=void 0!==document.getElementsByTagName("base")[0]),void 0===t.locationChangeAngularEmitter&&(e.locationChangeAngularEmitter=void 0!==window.angular),void 0===t.moveGradientsOutsideSymbol&&(e.moveGradientsOutsideSymbol=b.isFirefox())},n.prototype._handleLocationChange=function(t){var e=t.detail,n=e.oldUrl,r=e.newUrl;this.updateUrls(n,r)},n.prototype.add=function(e){var n=this,r=t.prototype.add.call(this,e);return this.isMounted&&r&&(e.mount(n.node),this._emitter.emit(F.SYMBOL_MOUNT,e.node)),r},n.prototype.attach=function(t){var e=this,n=this;if(n.isMounted)return n.node;var r="string"==typeof t?document.querySelector(t):t;return n.node=r,this.symbols.forEach((function(t){t.mount(n.node),e._emitter.emit(F.SYMBOL_MOUNT,t.node)})),y(r.querySelectorAll("symbol")).forEach((function(t){var e=_.createFromExistingNode(t);e.node=t,n.add(e)})),this._emitter.emit(F.MOUNT,r),r},n.prototype.destroy=function(){var t=this,e=t.config,n=t.symbols,r=t._emitter;n.forEach((function(t){return t.destroy()})),r.off("*"),window.removeEventListener(e.locationChangeEvent,this._handleLocationChange),this.isMounted&&this.unmount()},n.prototype.mount=function(t,e){void 0===t&&(t=this.config.mountTo),void 0===e&&(e=!1);var n=this;if(n.isMounted)return n.node;var r="string"==typeof t?document.querySelector(t):t,i=n.render();return this.node=i,e&&r.childNodes[0]?r.insertBefore(i,r.childNodes[0]):r.appendChild(i),this._emitter.emit(F.MOUNT,i),i},n.prototype.render=function(){return g(this.stringify())},n.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},n.prototype.updateUrls=function(t,e){if(!this.isMounted)return!1;var n=document.querySelectorAll(this.config.usagesToUpdate);return P(this.node,n,k(t)+"#",k(e)+"#"),!0},Object.defineProperties(n.prototype,i),n}(h),q=t((function(t){var e;e=function(){var t,e=[],n=document,r=n.documentElement.doScroll,i="DOMContentLoaded",o=(r?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState);return o||n.addEventListener(i,t=function(){for(n.removeEventListener(i,t),o=1;t=e.shift();)t()}),function(t){o?setTimeout(t,0):e.push(t)}},t.exports=e()})),U="__SVG_SPRITE_NODE__",z="__SVG_SPRITE__";window[z]?R=window[z]:(R=new j({attrs:{id:U,"aria-hidden":"true"}}),window[z]=R);var V=function(){var t=document.getElementById(U);t?R.attach(t):R.mount(document.body,!0)};return document.body?V():q(V),R}()}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var n=__webpack_module_cache__[t]={exports:{}};return __webpack_modules__[t].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var n in e)__webpack_require__.o(e,n)&&!__webpack_require__.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;__webpack_require__.g.importScripts&&(t=__webpack_require__.g.location+"");var e=__webpack_require__.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&!t;)t=n[r--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=t})();var __webpack_exports__={};(()=>{"use strict";var t=__webpack_require__(854),e=__webpack_require__.n(t),n=__webpack_require__(348),r=__webpack_require__.n(n),i=new(e())({id:"logo",use:"logo-usage",viewBox:"0 0 40 40",content:'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 40 40" id="logo"><g clip-path="url(#logo_a)"><path fill="#DC3E22" d="M38.915 23.283C38.915 33.706 30.466 40 20.044 40 9.62 40 1.172 31.55 1.172 21.128s8.713-16.83 19.135-16.83c10.423 0 18.608 8.563 18.608 18.985Z" /><path fill="#899441" d="M28.238 12.607c-.917-.934-2.4-1.802-3.505-2.056.607-.538.73-.556 1.49-.933 1.948-.964 4.835-1.053 4.835-1.053s-3.407-1.76-5.898-1.65c-.634.028-1.303.252-1.948.569.364-.513.709-1.024.929-1.408a47.782 47.782 0 0 0 1.383-2.65s-2.612.14-3.823 1.59c-.46.55-.808 1.25-1.062 1.907a8.8 8.8 0 0 0-1.448-1.341C16.7 3.779 12.72 4.169 12.72 4.169s3.007 1.706 4.36 3.408c.529.664 1.065.971 1.385 1.717-1.108-.24-3.607-.158-4.834.297-3.153 1.169-4.511 5.874-4.511 5.874s3.076-2.12 7.262-3.608c.92-.327 1.894-.414 2.742-.4-.385.6-.806 1.38-1.124 2.298-.774 2.235.249 7.556.249 7.556s2.242-3.146 3.155-5.695c.469-1.309.585-2.622.587-3.592.832.37 1.81.908 2.543 1.374 3.746 2.387 5.539 6.745 5.539 6.745s.522-5.137-1.834-7.536Z" /><path fill="#A8B64F" d="m20.5 10.31-.035-.001a1.343 1.343 0 0 1-1.308-1.376c.002-.064.066-4.572-2.438-6.532A1.343 1.343 0 0 1 18.375.286C21.955 3.088 21.849 8.76 21.843 9a1.344 1.344 0 0 1-1.342 1.308Z" /></g><defs><clipPath id="logo_a"><path fill="#fff" d="M0 0h40v40H0z" /></clipPath></defs></symbol>'});r().add(i);var o=new(e())({id:"task-settings",use:"task-settings-usage",viewBox:"0 0 26 26",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 26 26" id="task-settings"><path d="m11.469.969-.563 3.562A8.707 8.707 0 0 0 8.5 5.5L5.562 3.406 3.438 5.531 5.5 8.47a8.777 8.777 0 0 0-1 2.406l-3.531.594v3l3.531.625c.215.86.555 1.668 1 2.406l-2.094 2.938 2.125 2.125L8.47 20.5a8.71 8.71 0 0 0 2.406.969l.594 3.562h3l.656-3.562a8.582 8.582 0 0 0 2.375-1l2.969 2.093 2.125-2.125L20.47 17.5a8.76 8.76 0 0 0 1-2.375l3.562-.656v-3l-3.562-.594a8.752 8.752 0 0 0-1-2.375l2.093-2.969-2.125-2.125L17.5 5.531a8.848 8.848 0 0 0-2.406-1L14.469.97ZM13 6.469A6.533 6.533 0 0 1 19.531 13 6.533 6.533 0 0 1 13 19.531 6.536 6.536 0 0 1 6.469 13 6.536 6.536 0 0 1 13 6.469m0 1.593A4.948 4.948 0 0 0 8.062 13 4.948 4.948 0 0 0 13 17.938 4.948 4.948 0 0 0 17.938 13 4.948 4.948 0 0 0 13 8.062Zm-.031 2.876c1.144 0 2.094.914 2.094 2.062 0 1.145-.95 2.063-2.094 2.063A2.056 2.056 0 0 1 10.906 13c0-1.148.918-2.063 2.063-2.063Z" /></symbol>'});r().add(o);function a(t){if(null==t)return window;if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e&&e.defaultView||window}return t}function s(t){return t instanceof a(t).Element||t instanceof Element}function u(t){return t instanceof a(t).HTMLElement||t instanceof HTMLElement}function c(t){return"undefined"!=typeof ShadowRoot&&(t instanceof a(t).ShadowRoot||t instanceof ShadowRoot)}var l=Math.max,f=Math.min,d=Math.round;function p(){var t=navigator.userAgentData;return null!=t&&t.brands&&Array.isArray(t.brands)?t.brands.map((function(t){return t.brand+"/"+t.version})).join(" "):navigator.userAgent}function h(){return!/^((?!chrome|android).)*safari/i.test(p())}function m(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1);var r=t.getBoundingClientRect(),i=1,o=1;e&&u(t)&&(i=t.offsetWidth>0&&d(r.width)/t.offsetWidth||1,o=t.offsetHeight>0&&d(r.height)/t.offsetHeight||1);var c=(s(t)?a(t):window).visualViewport,l=!h()&&n,f=(r.left+(l&&c?c.offsetLeft:0))/i,p=(r.top+(l&&c?c.offsetTop:0))/o,m=r.width/i,g=r.height/o;return{width:m,height:g,top:p,right:f+m,bottom:p+g,left:f,x:f,y:p}}function g(t){var e=a(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function _(t){return t?(t.nodeName||"").toLowerCase():null}function v(t){return((s(t)?t.ownerDocument:t.document)||window.document).documentElement}function y(t){return m(v(t)).left+g(t).scrollLeft}function b(t){return a(t).getComputedStyle(t)}function w(t){var e=b(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+r)}function T(t,e,n){void 0===n&&(n=!1);var r,i,o=u(e),s=u(e)&&function(t){var e=t.getBoundingClientRect(),n=d(e.width)/t.offsetWidth||1,r=d(e.height)/t.offsetHeight||1;return 1!==n||1!==r}(e),c=v(e),l=m(t,s,n),f={scrollLeft:0,scrollTop:0},p={x:0,y:0};return(o||!o&&!n)&&(("body"!==_(e)||w(c))&&(f=(r=e)!==a(r)&&u(r)?{scrollLeft:(i=r).scrollLeft,scrollTop:i.scrollTop}:g(r)),u(e)?((p=m(e,!0)).x+=e.clientLeft,p.y+=e.clientTop):c&&(p.x=y(c))),{x:l.left+f.scrollLeft-p.x,y:l.top+f.scrollTop-p.y,width:l.width,height:l.height}}function k(t){var e=m(t),n=t.offsetWidth,r=t.offsetHeight;return Math.abs(e.width-n)<=1&&(n=e.width),Math.abs(e.height-r)<=1&&(r=e.height),{x:t.offsetLeft,y:t.offsetTop,width:n,height:r}}function x(t){return"html"===_(t)?t:t.assignedSlot||t.parentNode||(c(t)?t.host:null)||v(t)}function E(t){return["html","body","#document"].indexOf(_(t))>=0?t.ownerDocument.body:u(t)&&w(t)?t:E(x(t))}function S(t,e){var n;void 0===e&&(e=[]);var r=E(t),i=r===(null==(n=t.ownerDocument)?void 0:n.body),o=a(r),s=i?[o].concat(o.visualViewport||[],w(r)?r:[]):r,u=e.concat(s);return i?u:u.concat(S(x(s)))}function O(t){return["table","td","th"].indexOf(_(t))>=0}function B(t){return u(t)&&"fixed"!==b(t).position?t.offsetParent:null}function C(t){for(var e=a(t),n=B(t);n&&O(n)&&"static"===b(n).position;)n=B(n);return n&&("html"===_(n)||"body"===_(n)&&"static"===b(n).position)?e:n||function(t){var e=/firefox/i.test(p());if(/Trident/i.test(p())&&u(t)&&"fixed"===b(t).position)return null;var n=x(t);for(c(n)&&(n=n.host);u(n)&&["html","body"].indexOf(_(n))<0;){var r=b(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||e&&"filter"===r.willChange||e&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(t)||e}var A="top",I="bottom",M="right",L="left",R="auto",D=[A,I,M,L],N="start",P="end",F="clippingParents",j="viewport",q="popper",U="reference",z=D.reduce((function(t,e){return t.concat([e+"-"+N,e+"-"+P])}),[]),V=[].concat(D,[R]).reduce((function(t,e){return t.concat([e,e+"-"+N,e+"-"+P])}),[]),W=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function H(t){var e=new Map,n=new Set,r=[];function i(t){n.add(t.name),[].concat(t.requires||[],t.requiresIfExists||[]).forEach((function(t){if(!n.has(t)){var r=e.get(t);r&&i(r)}})),r.push(t)}return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||i(t)})),r}var K={placement:"bottom",modifiers:[],strategy:"absolute"};function Y(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function $(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,r=void 0===n?[]:n,i=e.defaultOptions,o=void 0===i?K:i;return function(t,e,n){void 0===n&&(n=o);var i,a,u={placement:"bottom",orderedModifiers:[],options:Object.assign({},K,o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},c=[],l=!1,f={state:u,setOptions:function(n){var i="function"==typeof n?n(u.options):n;d(),u.options=Object.assign({},o,u.options,i),u.scrollParents={reference:s(t)?S(t):t.contextElement?S(t.contextElement):[],popper:S(e)};var a,l,p=function(t){var e=H(t);return W.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}((a=[].concat(r,u.options.modifiers),l=a.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign({},n,e,{options:Object.assign({},n.options,e.options),data:Object.assign({},n.data,e.data)}):e,t}),{}),Object.keys(l).map((function(t){return l[t]}))));return u.orderedModifiers=p.filter((function(t){return t.enabled})),u.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,r=void 0===n?{}:n,i=t.effect;if("function"==typeof i){var o=i({state:u,name:e,instance:f,options:r}),a=function(){};c.push(o||a)}})),f.update()},forceUpdate:function(){if(!l){var t=u.elements,e=t.reference,n=t.popper;if(Y(e,n)){u.rects={reference:T(e,C(n),"fixed"===u.options.strategy),popper:k(n)},u.reset=!1,u.placement=u.options.placement,u.orderedModifiers.forEach((function(t){return u.modifiersData[t.name]=Object.assign({},t.data)}));for(var r=0;r<u.orderedModifiers.length;r++)if(!0!==u.reset){var i=u.orderedModifiers[r],o=i.fn,a=i.options,s=void 0===a?{}:a,c=i.name;"function"==typeof o&&(u=o({state:u,options:s,name:c,instance:f})||u)}else u.reset=!1,r=-1}}},update:(i=function(){return new Promise((function(t){f.forceUpdate(),t(u)}))},function(){return a||(a=new Promise((function(t){Promise.resolve().then((function(){a=void 0,t(i())}))}))),a}),destroy:function(){d(),l=!0}};if(!Y(t,e))return f;function d(){c.forEach((function(t){return t()})),c=[]}return f.setOptions(n).then((function(t){!l&&n.onFirstUpdate&&n.onFirstUpdate(t)})),f}}var G={passive:!0};function X(t){return t.split("-")[0]}function Z(t){return t.split("-")[1]}function J(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function Q(t){var e,n=t.reference,r=t.element,i=t.placement,o=i?X(i):null,a=i?Z(i):null,s=n.x+n.width/2-r.width/2,u=n.y+n.height/2-r.height/2;switch(o){case A:e={x:s,y:n.y-r.height};break;case I:e={x:s,y:n.y+n.height};break;case M:e={x:n.x+n.width,y:u};break;case L:e={x:n.x-r.width,y:u};break;default:e={x:n.x,y:n.y}}var c=o?J(o):null;if(null!=c){var l="y"===c?"height":"width";switch(a){case N:e[c]=e[c]-(n[l]/2-r[l]/2);break;case P:e[c]=e[c]+(n[l]/2-r[l]/2)}}return e}var tt={top:"auto",right:"auto",bottom:"auto",left:"auto"};function et(t){var e,n=t.popper,r=t.popperRect,i=t.placement,o=t.variation,s=t.offsets,u=t.position,c=t.gpuAcceleration,l=t.adaptive,f=t.roundOffsets,p=t.isFixed,h=s.x,m=void 0===h?0:h,g=s.y,_=void 0===g?0:g,y="function"==typeof f?f({x:m,y:_}):{x:m,y:_};m=y.x,_=y.y;var w=s.hasOwnProperty("x"),T=s.hasOwnProperty("y"),k=L,x=A,E=window;if(l){var S=C(n),O="clientHeight",B="clientWidth";if(S===a(n)&&"static"!==b(S=v(n)).position&&"absolute"===u&&(O="scrollHeight",B="scrollWidth"),i===A||(i===L||i===M)&&o===P)x=I,_-=(p&&S===E&&E.visualViewport?E.visualViewport.height:S[O])-r.height,_*=c?1:-1;if(i===L||(i===A||i===I)&&o===P)k=M,m-=(p&&S===E&&E.visualViewport?E.visualViewport.width:S[B])-r.width,m*=c?1:-1}var R,D=Object.assign({position:u},l&&tt),N=!0===f?function(t,e){var n=t.x,r=t.y,i=e.devicePixelRatio||1;return{x:d(n*i)/i||0,y:d(r*i)/i||0}}({x:m,y:_},a(n)):{x:m,y:_};return m=N.x,_=N.y,c?Object.assign({},D,((R={})[x]=T?"0":"",R[k]=w?"0":"",R.transform=(E.devicePixelRatio||1)<=1?"translate("+m+"px, "+_+"px)":"translate3d("+m+"px, "+_+"px, 0)",R)):Object.assign({},D,((e={})[x]=T?_+"px":"",e[k]=w?m+"px":"",e.transform="",e))}const nt={name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},r=e.attributes[t]||{},i=e.elements[t];u(i)&&_(i)&&(Object.assign(i.style,n),Object.keys(r).forEach((function(t){var e=r[t];!1===e?i.removeAttribute(t):i.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var r=e.elements[t],i=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});u(r)&&_(r)&&(Object.assign(r.style,o),Object.keys(i).forEach((function(t){r.removeAttribute(t)})))}))}},requires:["computeStyles"]};const rt={name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,r=t.name,i=n.offset,o=void 0===i?[0,0]:i,a=V.reduce((function(t,n){return t[n]=function(t,e,n){var r=X(t),i=[L,A].indexOf(r)>=0?-1:1,o="function"==typeof n?n(Object.assign({},e,{placement:t})):n,a=o[0],s=o[1];return a=a||0,s=(s||0)*i,[L,M].indexOf(r)>=0?{x:s,y:a}:{x:a,y:s}}(n,e.rects,o),t}),{}),s=a[e.placement],u=s.x,c=s.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=u,e.modifiersData.popperOffsets.y+=c),e.modifiersData[r]=a}};var it={left:"right",right:"left",bottom:"top",top:"bottom"};function ot(t){return t.replace(/left|right|bottom|top/g,(function(t){return it[t]}))}var at={start:"end",end:"start"};function st(t){return t.replace(/start|end/g,(function(t){return at[t]}))}function ut(t,e){var n=e.getRootNode&&e.getRootNode();if(t.contains(e))return!0;if(n&&c(n)){var r=e;do{if(r&&t.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function ct(t){return Object.assign({},t,{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function lt(t,e,n){return e===j?ct(function(t,e){var n=a(t),r=v(t),i=n.visualViewport,o=r.clientWidth,s=r.clientHeight,u=0,c=0;if(i){o=i.width,s=i.height;var l=h();(l||!l&&"fixed"===e)&&(u=i.offsetLeft,c=i.offsetTop)}return{width:o,height:s,x:u+y(t),y:c}}(t,n)):s(e)?function(t,e){var n=m(t,!1,"fixed"===e);return n.top=n.top+t.clientTop,n.left=n.left+t.clientLeft,n.bottom=n.top+t.clientHeight,n.right=n.left+t.clientWidth,n.width=t.clientWidth,n.height=t.clientHeight,n.x=n.left,n.y=n.top,n}(e,n):ct(function(t){var e,n=v(t),r=g(t),i=null==(e=t.ownerDocument)?void 0:e.body,o=l(n.scrollWidth,n.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),a=l(n.scrollHeight,n.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),s=-r.scrollLeft+y(t),u=-r.scrollTop;return"rtl"===b(i||n).direction&&(s+=l(n.clientWidth,i?i.clientWidth:0)-o),{width:o,height:a,x:s,y:u}}(v(t)))}function ft(t,e,n,r){var i="clippingParents"===e?function(t){var e=S(x(t)),n=["absolute","fixed"].indexOf(b(t).position)>=0&&u(t)?C(t):t;return s(n)?e.filter((function(t){return s(t)&&ut(t,n)&&"body"!==_(t)})):[]}(t):[].concat(e),o=[].concat(i,[n]),a=o[0],c=o.reduce((function(e,n){var i=lt(t,n,r);return e.top=l(i.top,e.top),e.right=f(i.right,e.right),e.bottom=f(i.bottom,e.bottom),e.left=l(i.left,e.left),e}),lt(t,a,r));return c.width=c.right-c.left,c.height=c.bottom-c.top,c.x=c.left,c.y=c.top,c}function dt(t){return Object.assign({},{top:0,right:0,bottom:0,left:0},t)}function pt(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}function ht(t,e){void 0===e&&(e={});var n=e,r=n.placement,i=void 0===r?t.placement:r,o=n.strategy,a=void 0===o?t.strategy:o,u=n.boundary,c=void 0===u?F:u,l=n.rootBoundary,f=void 0===l?j:l,d=n.elementContext,p=void 0===d?q:d,h=n.altBoundary,g=void 0!==h&&h,_=n.padding,y=void 0===_?0:_,b=dt("number"!=typeof y?y:pt(y,D)),w=p===q?U:q,T=t.rects.popper,k=t.elements[g?w:p],x=ft(s(k)?k:k.contextElement||v(t.elements.popper),c,f,a),E=m(t.elements.reference),S=Q({reference:E,element:T,strategy:"absolute",placement:i}),O=ct(Object.assign({},T,S)),B=p===q?O:E,C={top:x.top-B.top+b.top,bottom:B.bottom-x.bottom+b.bottom,left:x.left-B.left+b.left,right:B.right-x.right+b.right},L=t.modifiersData.offset;if(p===q&&L){var R=L[i];Object.keys(C).forEach((function(t){var e=[M,I].indexOf(t)>=0?1:-1,n=[A,I].indexOf(t)>=0?"y":"x";C[t]+=R[n]*e}))}return C}function mt(t,e,n){return l(t,f(e,n))}const gt={name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,r=t.name,i=n.mainAxis,o=void 0===i||i,a=n.altAxis,s=void 0!==a&&a,u=n.boundary,c=n.rootBoundary,d=n.altBoundary,p=n.padding,h=n.tether,m=void 0===h||h,g=n.tetherOffset,_=void 0===g?0:g,v=ht(e,{boundary:u,rootBoundary:c,padding:p,altBoundary:d}),y=X(e.placement),b=Z(e.placement),w=!b,T=J(y),x="x"===T?"y":"x",E=e.modifiersData.popperOffsets,S=e.rects.reference,O=e.rects.popper,B="function"==typeof _?_(Object.assign({},e.rects,{placement:e.placement})):_,R="number"==typeof B?{mainAxis:B,altAxis:B}:Object.assign({mainAxis:0,altAxis:0},B),D=e.modifiersData.offset?e.modifiersData.offset[e.placement]:null,P={x:0,y:0};if(E){if(o){var F,j="y"===T?A:L,q="y"===T?I:M,U="y"===T?"height":"width",z=E[T],V=z+v[j],W=z-v[q],H=m?-O[U]/2:0,K=b===N?S[U]:O[U],Y=b===N?-O[U]:-S[U],$=e.elements.arrow,G=m&&$?k($):{width:0,height:0},Q=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},tt=Q[j],et=Q[q],nt=mt(0,S[U],G[U]),rt=w?S[U]/2-H-nt-tt-R.mainAxis:K-nt-tt-R.mainAxis,it=w?-S[U]/2+H+nt+et+R.mainAxis:Y+nt+et+R.mainAxis,ot=e.elements.arrow&&C(e.elements.arrow),at=ot?"y"===T?ot.clientTop||0:ot.clientLeft||0:0,st=null!=(F=null==D?void 0:D[T])?F:0,ut=z+it-st,ct=mt(m?f(V,z+rt-st-at):V,z,m?l(W,ut):W);E[T]=ct,P[T]=ct-z}if(s){var lt,ft="x"===T?A:L,dt="x"===T?I:M,pt=E[x],gt="y"===x?"height":"width",_t=pt+v[ft],vt=pt-v[dt],yt=-1!==[A,L].indexOf(y),bt=null!=(lt=null==D?void 0:D[x])?lt:0,wt=yt?_t:pt-S[gt]-O[gt]-bt+R.altAxis,Tt=yt?pt+S[gt]+O[gt]-bt-R.altAxis:vt,kt=m&&yt?function(t,e,n){var r=mt(t,e,n);return r>n?n:r}(wt,pt,Tt):mt(m?wt:_t,pt,m?Tt:vt);E[x]=kt,P[x]=kt-pt}e.modifiersData[r]=P}},requiresIfExists:["offset"]};const _t={name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,r=t.name,i=t.options,o=n.elements.arrow,a=n.modifiersData.popperOffsets,s=X(n.placement),u=J(s),c=[L,M].indexOf(s)>=0?"height":"width";if(o&&a){var l=function(t,e){return dt("number"!=typeof(t="function"==typeof t?t(Object.assign({},e.rects,{placement:e.placement})):t)?t:pt(t,D))}(i.padding,n),f=k(o),d="y"===u?A:L,p="y"===u?I:M,h=n.rects.reference[c]+n.rects.reference[u]-a[u]-n.rects.popper[c],m=a[u]-n.rects.reference[u],g=C(o),_=g?"y"===u?g.clientHeight||0:g.clientWidth||0:0,v=h/2-m/2,y=l[d],b=_-f[c]-l[p],w=_/2-f[c]/2+v,T=mt(y,w,b),x=u;n.modifiersData[r]=((e={})[x]=T,e.centerOffset=T-w,e)}},effect:function(t){var e=t.state,n=t.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=e.elements.popper.querySelector(r)))&&ut(e.elements.popper,r)&&(e.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function vt(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function yt(t){return[A,M,I,L].some((function(e){return t[e]>=0}))}var bt=$({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,r=t.options,i=r.scroll,o=void 0===i||i,s=r.resize,u=void 0===s||s,c=a(e.elements.popper),l=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&l.forEach((function(t){t.addEventListener("scroll",n.update,G)})),u&&c.addEventListener("resize",n.update,G),function(){o&&l.forEach((function(t){t.removeEventListener("scroll",n.update,G)})),u&&c.removeEventListener("resize",n.update,G)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=Q({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,r=n.gpuAcceleration,i=void 0===r||r,o=n.adaptive,a=void 0===o||o,s=n.roundOffsets,u=void 0===s||s,c={placement:X(e.placement),variation:Z(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:i,isFixed:"fixed"===e.options.strategy};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign({},e.styles.popper,et(Object.assign({},c,{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:a,roundOffsets:u})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign({},e.styles.arrow,et(Object.assign({},c,{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:u})))),e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-placement":e.placement})},data:{}},nt,rt,{name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,r=t.name;if(!e.modifiersData[r]._skip){for(var i=n.mainAxis,o=void 0===i||i,a=n.altAxis,s=void 0===a||a,u=n.fallbackPlacements,c=n.padding,l=n.boundary,f=n.rootBoundary,d=n.altBoundary,p=n.flipVariations,h=void 0===p||p,m=n.allowedAutoPlacements,g=e.options.placement,_=X(g),v=u||(_===g||!h?[ot(g)]:function(t){if(X(t)===R)return[];var e=ot(t);return[st(t),e,st(e)]}(g)),y=[g].concat(v).reduce((function(t,n){return t.concat(X(n)===R?function(t,e){void 0===e&&(e={});var n=e,r=n.placement,i=n.boundary,o=n.rootBoundary,a=n.padding,s=n.flipVariations,u=n.allowedAutoPlacements,c=void 0===u?V:u,l=Z(r),f=l?s?z:z.filter((function(t){return Z(t)===l})):D,d=f.filter((function(t){return c.indexOf(t)>=0}));0===d.length&&(d=f);var p=d.reduce((function(e,n){return e[n]=ht(t,{placement:n,boundary:i,rootBoundary:o,padding:a})[X(n)],e}),{});return Object.keys(p).sort((function(t,e){return p[t]-p[e]}))}(e,{placement:n,boundary:l,rootBoundary:f,padding:c,flipVariations:h,allowedAutoPlacements:m}):n)}),[]),b=e.rects.reference,w=e.rects.popper,T=new Map,k=!0,x=y[0],E=0;E<y.length;E++){var S=y[E],O=X(S),B=Z(S)===N,C=[A,I].indexOf(O)>=0,P=C?"width":"height",F=ht(e,{placement:S,boundary:l,rootBoundary:f,altBoundary:d,padding:c}),j=C?B?M:L:B?I:A;b[P]>w[P]&&(j=ot(j));var q=ot(j),U=[];if(o&&U.push(F[O]<=0),s&&U.push(F[j]<=0,F[q]<=0),U.every((function(t){return t}))){x=S,k=!1;break}T.set(S,U)}if(k)for(var W=function(t){var e=y.find((function(e){var n=T.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return x=e,"break"},H=h?3:1;H>0;H--){if("break"===W(H))break}e.placement!==x&&(e.modifiersData[r]._skip=!0,e.placement=x,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},gt,_t,{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,r=e.rects.reference,i=e.rects.popper,o=e.modifiersData.preventOverflow,a=ht(e,{elementContext:"reference"}),s=ht(e,{altBoundary:!0}),u=vt(a,r),c=vt(s,i,o),l=yt(u),f=yt(c);e.modifiersData[n]={referenceClippingOffsets:u,popperEscapeOffsets:c,isReferenceHidden:l,hasPopperEscaped:f},e.attributes.popper=Object.assign({},e.attributes.popper,{"data-popper-reference-hidden":l,"data-popper-escaped":f})}}]}),wt="tippy-content",Tt="tippy-backdrop",kt="tippy-arrow",xt="tippy-svg-arrow",Et={passive:!0,capture:!0},St=function(){return document.body};function Ot(t,e,n){if(Array.isArray(t)){var r=t[e];return null==r?Array.isArray(n)?n[e]:n:r}return t}function Bt(t,e){var n={}.toString.call(t);return 0===n.indexOf("[object")&&n.indexOf(e+"]")>-1}function Ct(t,e){return"function"==typeof t?t.apply(void 0,e):t}function At(t,e){return 0===e?t:function(r){clearTimeout(n),n=setTimeout((function(){t(r)}),e)};var n}function It(t){return[].concat(t)}function Mt(t,e){-1===t.indexOf(e)&&t.push(e)}function Lt(t){return t.split("-")[0]}function Rt(t){return[].slice.call(t)}function Dt(t){return Object.keys(t).reduce((function(e,n){return void 0!==t[n]&&(e[n]=t[n]),e}),{})}function Nt(){return document.createElement("div")}function Pt(t){return["Element","Fragment"].some((function(e){return Bt(t,e)}))}function Ft(t){return Bt(t,"MouseEvent")}function jt(t){return!(!t||!t._tippy||t._tippy.reference!==t)}function qt(t){return Pt(t)?[t]:function(t){return Bt(t,"NodeList")}(t)?Rt(t):Array.isArray(t)?t:Rt(document.querySelectorAll(t))}function Ut(t,e){t.forEach((function(t){t&&(t.style.transitionDuration=e+"ms")}))}function zt(t,e){t.forEach((function(t){t&&t.setAttribute("data-state",e)}))}function Vt(t){var e,n=It(t)[0];return null!=n&&null!=(e=n.ownerDocument)&&e.body?n.ownerDocument:document}function Wt(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach((function(e){t[r](e,n)}))}function Ht(t,e){for(var n=e;n;){var r;if(t.contains(n))return!0;n=null==n.getRootNode||null==(r=n.getRootNode())?void 0:r.host}return!1}var Kt={isTouch:!1},Yt=0;function $t(){Kt.isTouch||(Kt.isTouch=!0,window.performance&&document.addEventListener("mousemove",Gt))}function Gt(){var t=performance.now();t-Yt<20&&(Kt.isTouch=!1,document.removeEventListener("mousemove",Gt)),Yt=t}function Xt(){var t=document.activeElement;if(jt(t)){var e=t._tippy;t.blur&&!e.state.isVisible&&t.blur()}}var Zt=!!("undefined"!=typeof window&&"undefined"!=typeof document)&&!!window.msCrypto;var Jt={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Qt=Object.assign({appendTo:St,aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},Jt,{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),te=Object.keys(Qt);function ee(t){var e=(t.plugins||[]).reduce((function(e,n){var r,i=n.name,o=n.defaultValue;i&&(e[i]=void 0!==t[i]?t[i]:null!=(r=Qt[i])?r:o);return e}),{});return Object.assign({},t,e)}function ne(t,e){var n=Object.assign({},e,{content:Ct(e.content,[t])},e.ignoreAttributes?{}:function(t,e){return(e?Object.keys(ee(Object.assign({},Qt,{plugins:e}))):te).reduce((function(e,n){var r=(t.getAttribute("data-tippy-"+n)||"").trim();if(!r)return e;if("content"===n)e[n]=r;else try{e[n]=JSON.parse(r)}catch(t){e[n]=r}return e}),{})}(t,e.plugins));return n.aria=Object.assign({},Qt.aria,n.aria),n.aria={expanded:"auto"===n.aria.expanded?e.interactive:n.aria.expanded,content:"auto"===n.aria.content?e.interactive?null:"describedby":n.aria.content},n}var re=function(){return"innerHTML"};function ie(t,e){t[re()]=e}function oe(t){var e=Nt();return!0===t?e.className=kt:(e.className=xt,Pt(t)?e.appendChild(t):ie(e,t)),e}function ae(t,e){Pt(e.content)?(ie(t,""),t.appendChild(e.content)):"function"!=typeof e.content&&(e.allowHTML?ie(t,e.content):t.textContent=e.content)}function se(t){var e=t.firstElementChild,n=Rt(e.children);return{box:e,content:n.find((function(t){return t.classList.contains(wt)})),arrow:n.find((function(t){return t.classList.contains(kt)||t.classList.contains(xt)})),backdrop:n.find((function(t){return t.classList.contains(Tt)}))}}function ue(t){var e=Nt(),n=Nt();n.className="tippy-box",n.setAttribute("data-state","hidden"),n.setAttribute("tabindex","-1");var r=Nt();function i(n,r){var i=se(e),o=i.box,a=i.content,s=i.arrow;r.theme?o.setAttribute("data-theme",r.theme):o.removeAttribute("data-theme"),"string"==typeof r.animation?o.setAttribute("data-animation",r.animation):o.removeAttribute("data-animation"),r.inertia?o.setAttribute("data-inertia",""):o.removeAttribute("data-inertia"),o.style.maxWidth="number"==typeof r.maxWidth?r.maxWidth+"px":r.maxWidth,r.role?o.setAttribute("role",r.role):o.removeAttribute("role"),n.content===r.content&&n.allowHTML===r.allowHTML||ae(a,t.props),r.arrow?s?n.arrow!==r.arrow&&(o.removeChild(s),o.appendChild(oe(r.arrow))):o.appendChild(oe(r.arrow)):s&&o.removeChild(s)}return r.className=wt,r.setAttribute("data-state","hidden"),ae(r,t.props),e.appendChild(n),n.appendChild(r),i(t.props,t.props),{popper:e,onUpdate:i}}ue.$$tippy=!0;var ce=1,le=[],fe=[];function de(t,e){var n,r,i,o,a,s,u,c,l=ne(t,Object.assign({},Qt,ee(Dt(e)))),f=!1,d=!1,p=!1,h=!1,m=[],g=At(Y,l.interactiveDebounce),_=ce++,v=(c=l.plugins).filter((function(t,e){return c.indexOf(t)===e})),y={id:_,reference:t,popper:Nt(),popperInstance:null,props:l,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:v,clearDelayTimeouts:function(){clearTimeout(n),clearTimeout(r),cancelAnimationFrame(i)},setProps:function(e){0;if(y.state.isDestroyed)return;L("onBeforeUpdate",[y,e]),H();var n=y.props,r=ne(t,Object.assign({},n,Dt(e),{ignoreAttributes:!0}));y.props=r,W(),n.interactiveDebounce!==r.interactiveDebounce&&(N(),g=At(Y,r.interactiveDebounce));n.triggerTarget&&!r.triggerTarget?It(n.triggerTarget).forEach((function(t){t.removeAttribute("aria-expanded")})):r.triggerTarget&&t.removeAttribute("aria-expanded");D(),M(),T&&T(n,r);y.popperInstance&&(Z(),Q().forEach((function(t){requestAnimationFrame(t._tippy.popperInstance.forceUpdate)})));L("onAfterUpdate",[y,e])},setContent:function(t){y.setProps({content:t})},show:function(){0;var t=y.state.isVisible,e=y.state.isDestroyed,n=!y.state.isEnabled,r=Kt.isTouch&&!y.props.touch,i=Ot(y.props.duration,0,Qt.duration);if(t||e||n||r)return;if(B().hasAttribute("disabled"))return;if(L("onShow",[y],!1),!1===y.props.onShow(y))return;y.state.isVisible=!0,O()&&(w.style.visibility="visible");M(),q(),y.state.isMounted||(w.style.transition="none");if(O()){var o=A();Ut([o.box,o.content],0)}s=function(){var t;if(y.state.isVisible&&!h){if(h=!0,w.offsetHeight,w.style.transition=y.props.moveTransition,O()&&y.props.animation){var e=A(),n=e.box,r=e.content;Ut([n,r],i),zt([n,r],"visible")}R(),D(),Mt(fe,y),null==(t=y.popperInstance)||t.forceUpdate(),L("onMount",[y]),y.props.animation&&O()&&function(t,e){z(t,e)}(i,(function(){y.state.isShown=!0,L("onShown",[y])}))}},function(){var t,e=y.props.appendTo,n=B();t=y.props.interactive&&e===St||"parent"===e?n.parentNode:Ct(e,[n]);t.contains(w)||t.appendChild(w);y.state.isMounted=!0,Z(),!1}()},hide:function(){0;var t=!y.state.isVisible,e=y.state.isDestroyed,n=!y.state.isEnabled,r=Ot(y.props.duration,1,Qt.duration);if(t||e||n)return;if(L("onHide",[y],!1),!1===y.props.onHide(y))return;y.state.isVisible=!1,y.state.isShown=!1,h=!1,f=!1,O()&&(w.style.visibility="hidden");if(N(),U(),M(!0),O()){var i=A(),o=i.box,a=i.content;y.props.animation&&(Ut([o,a],r),zt([o,a],"hidden"))}R(),D(),y.props.animation?O()&&function(t,e){z(t,(function(){!y.state.isVisible&&w.parentNode&&w.parentNode.contains(w)&&e()}))}(r,y.unmount):y.unmount()},hideWithInteractivity:function(t){0;C().addEventListener("mousemove",g),Mt(le,g),g(t)},enable:function(){y.state.isEnabled=!0},disable:function(){y.hide(),y.state.isEnabled=!1},unmount:function(){0;y.state.isVisible&&y.hide();if(!y.state.isMounted)return;J(),Q().forEach((function(t){t._tippy.unmount()})),w.parentNode&&w.parentNode.removeChild(w);fe=fe.filter((function(t){return t!==y})),y.state.isMounted=!1,L("onHidden",[y])},destroy:function(){0;if(y.state.isDestroyed)return;y.clearDelayTimeouts(),y.unmount(),H(),delete t._tippy,y.state.isDestroyed=!0,L("onDestroy",[y])}};if(!l.render)return y;var b=l.render(y),w=b.popper,T=b.onUpdate;w.setAttribute("data-tippy-root",""),w.id="tippy-"+y.id,y.popper=w,t._tippy=y,w._tippy=y;var k=v.map((function(t){return t.fn(y)})),x=t.hasAttribute("aria-expanded");return W(),D(),M(),L("onCreate",[y]),l.showOnCreate&&tt(),w.addEventListener("mouseenter",(function(){y.props.interactive&&y.state.isVisible&&y.clearDelayTimeouts()})),w.addEventListener("mouseleave",(function(){y.props.interactive&&y.props.trigger.indexOf("mouseenter")>=0&&C().addEventListener("mousemove",g)})),y;function E(){var t=y.props.touch;return Array.isArray(t)?t:[t,0]}function S(){return"hold"===E()[0]}function O(){var t;return!(null==(t=y.props.render)||!t.$$tippy)}function B(){return u||t}function C(){var t=B().parentNode;return t?Vt(t):document}function A(){return se(w)}function I(t){return y.state.isMounted&&!y.state.isVisible||Kt.isTouch||o&&"focus"===o.type?0:Ot(y.props.delay,t?0:1,Qt.delay)}function M(t){void 0===t&&(t=!1),w.style.pointerEvents=y.props.interactive&&!t?"":"none",w.style.zIndex=""+y.props.zIndex}function L(t,e,n){var r;(void 0===n&&(n=!0),k.forEach((function(n){n[t]&&n[t].apply(n,e)})),n)&&(r=y.props)[t].apply(r,e)}function R(){var e=y.props.aria;if(e.content){var n="aria-"+e.content,r=w.id;It(y.props.triggerTarget||t).forEach((function(t){var e=t.getAttribute(n);if(y.state.isVisible)t.setAttribute(n,e?e+" "+r:r);else{var i=e&&e.replace(r,"").trim();i?t.setAttribute(n,i):t.removeAttribute(n)}}))}}function D(){!x&&y.props.aria.expanded&&It(y.props.triggerTarget||t).forEach((function(t){y.props.interactive?t.setAttribute("aria-expanded",y.state.isVisible&&t===B()?"true":"false"):t.removeAttribute("aria-expanded")}))}function N(){C().removeEventListener("mousemove",g),le=le.filter((function(t){return t!==g}))}function P(e){if(!Kt.isTouch||!p&&"mousedown"!==e.type){var n=e.composedPath&&e.composedPath()[0]||e.target;if(!y.props.interactive||!Ht(w,n)){if(It(y.props.triggerTarget||t).some((function(t){return Ht(t,n)}))){if(Kt.isTouch)return;if(y.state.isVisible&&y.props.trigger.indexOf("click")>=0)return}else L("onClickOutside",[y,e]);!0===y.props.hideOnClick&&(y.clearDelayTimeouts(),y.hide(),d=!0,setTimeout((function(){d=!1})),y.state.isMounted||U())}}}function F(){p=!0}function j(){p=!1}function q(){var t=C();t.addEventListener("mousedown",P,!0),t.addEventListener("touchend",P,Et),t.addEventListener("touchstart",j,Et),t.addEventListener("touchmove",F,Et)}function U(){var t=C();t.removeEventListener("mousedown",P,!0),t.removeEventListener("touchend",P,Et),t.removeEventListener("touchstart",j,Et),t.removeEventListener("touchmove",F,Et)}function z(t,e){var n=A().box;function r(t){t.target===n&&(Wt(n,"remove",r),e())}if(0===t)return e();Wt(n,"remove",a),Wt(n,"add",r),a=r}function V(e,n,r){void 0===r&&(r=!1),It(y.props.triggerTarget||t).forEach((function(t){t.addEventListener(e,n,r),m.push({node:t,eventType:e,handler:n,options:r})}))}function W(){var t;S()&&(V("touchstart",K,{passive:!0}),V("touchend",$,{passive:!0})),(t=y.props.trigger,t.split(/\s+/).filter(Boolean)).forEach((function(t){if("manual"!==t)switch(V(t,K),t){case"mouseenter":V("mouseleave",$);break;case"focus":V(Zt?"focusout":"blur",G);break;case"focusin":V("focusout",G)}}))}function H(){m.forEach((function(t){var e=t.node,n=t.eventType,r=t.handler,i=t.options;e.removeEventListener(n,r,i)})),m=[]}function K(t){var e,n=!1;if(y.state.isEnabled&&!X(t)&&!d){var r="focus"===(null==(e=o)?void 0:e.type);o=t,u=t.currentTarget,D(),!y.state.isVisible&&Ft(t)&&le.forEach((function(e){return e(t)})),"click"===t.type&&(y.props.trigger.indexOf("mouseenter")<0||f)&&!1!==y.props.hideOnClick&&y.state.isVisible?n=!0:tt(t),"click"===t.type&&(f=!n),n&&!r&&et(t)}}function Y(t){var e=t.target,n=B().contains(e)||w.contains(e);if("mousemove"!==t.type||!n){var r=Q().concat(w).map((function(t){var e,n=null==(e=t._tippy.popperInstance)?void 0:e.state;return n?{popperRect:t.getBoundingClientRect(),popperState:n,props:l}:null})).filter(Boolean);(function(t,e){var n=e.clientX,r=e.clientY;return t.every((function(t){var e=t.popperRect,i=t.popperState,o=t.props.interactiveBorder,a=Lt(i.placement),s=i.modifiersData.offset;if(!s)return!0;var u="bottom"===a?s.top.y:0,c="top"===a?s.bottom.y:0,l="right"===a?s.left.x:0,f="left"===a?s.right.x:0,d=e.top-r+u>o,p=r-e.bottom-c>o,h=e.left-n+l>o,m=n-e.right-f>o;return d||p||h||m}))})(r,t)&&(N(),et(t))}}function $(t){X(t)||y.props.trigger.indexOf("click")>=0&&f||(y.props.interactive?y.hideWithInteractivity(t):et(t))}function G(t){y.props.trigger.indexOf("focusin")<0&&t.target!==B()||y.props.interactive&&t.relatedTarget&&w.contains(t.relatedTarget)||et(t)}function X(t){return!!Kt.isTouch&&S()!==t.type.indexOf("touch")>=0}function Z(){J();var e=y.props,n=e.popperOptions,r=e.placement,i=e.offset,o=e.getReferenceClientRect,a=e.moveTransition,u=O()?se(w).arrow:null,c=o?{getBoundingClientRect:o,contextElement:o.contextElement||B()}:t,l={name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(t){var e=t.state;if(O()){var n=A().box;["placement","reference-hidden","escaped"].forEach((function(t){"placement"===t?n.setAttribute("data-placement",e.placement):e.attributes.popper["data-popper-"+t]?n.setAttribute("data-"+t,""):n.removeAttribute("data-"+t)})),e.attributes.popper={}}}},f=[{name:"offset",options:{offset:i}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!a}},l];O()&&u&&f.push({name:"arrow",options:{element:u,padding:3}}),f.push.apply(f,(null==n?void 0:n.modifiers)||[]),y.popperInstance=bt(c,w,Object.assign({},n,{placement:r,onFirstUpdate:s,modifiers:f}))}function J(){y.popperInstance&&(y.popperInstance.destroy(),y.popperInstance=null)}function Q(){return Rt(w.querySelectorAll("[data-tippy-root]"))}function tt(t){y.clearDelayTimeouts(),t&&L("onTrigger",[y,t]),q();var e=I(!0),r=E(),i=r[0],o=r[1];Kt.isTouch&&"hold"===i&&o&&(e=o),e?n=setTimeout((function(){y.show()}),e):y.show()}function et(t){if(y.clearDelayTimeouts(),L("onUntrigger",[y,t]),y.state.isVisible){if(!(y.props.trigger.indexOf("mouseenter")>=0&&y.props.trigger.indexOf("click")>=0&&["mouseleave","mousemove"].indexOf(t.type)>=0&&f)){var e=I(!1);e?r=setTimeout((function(){y.state.isVisible&&y.hide()}),e):i=requestAnimationFrame((function(){y.hide()}))}}else U()}}function pe(t,e){void 0===e&&(e={});var n=Qt.plugins.concat(e.plugins||[]);document.addEventListener("touchstart",$t,Et),window.addEventListener("blur",Xt);var r=Object.assign({},e,{plugins:n}),i=qt(t).reduce((function(t,e){var n=e&&de(e,r);return n&&t.push(n),t}),[]);return Pt(t)?i[0]:i}pe.defaultProps=Qt,pe.setDefaultProps=function(t){Object.keys(t).forEach((function(e){Qt[e]=t[e]}))},pe.currentInput=Kt;var he=function(t){var e=void 0===t?{}:t,n=e.exclude,r=e.duration;fe.forEach((function(t){var e=!1;if(n&&(e=jt(n)?t.reference===n:t.popper===n.popper),!e){var i=t.props.duration;t.setProps({duration:r}),t.hide(),t.state.isDestroyed||t.setProps({duration:i})}}))};Object.assign({},nt,{effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};Object.assign(e.elements.popper.style,n.popper),e.styles=n,e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow)}});pe.setDefaultProps({render:ue});const me=pe,ge={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let _e;const ve=new Uint8Array(16);function ye(){if(!_e&&(_e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!_e))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return _e(ve)}const be=[];for(let t=0;t<256;++t)be.push((t+256).toString(16).slice(1));function we(t,e=0){return be[t[e+0]]+be[t[e+1]]+be[t[e+2]]+be[t[e+3]]+"-"+be[t[e+4]]+be[t[e+5]]+"-"+be[t[e+6]]+be[t[e+7]]+"-"+be[t[e+8]]+be[t[e+9]]+"-"+be[t[e+10]]+be[t[e+11]]+be[t[e+12]]+be[t[e+13]]+be[t[e+14]]+be[t[e+15]]}const Te=function(t,e,n){if(ge.randomUUID&&!e&&!t)return ge.randomUUID();const r=(t=t||{}).random||(t.rng||ye)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){n=n||0;for(let t=0;t<16;++t)e[n+t]=r[t];return e}return we(r)};var ke=new(e())({id:"configuration-add-tomato",use:"configuration-add-tomato-usage",viewBox:"0 0 18 18",content:'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18" id="configuration-add-tomato"><g clip-path="url(#configuration-add-tomato_a)"><path fill="#A8B64F" d="M9.75 5.25h-1.5v3h-3v1.5h3v3h1.5v-3h3v-1.5h-3zM9 1.5C4.867 1.5 1.5 4.867 1.5 9s3.367 7.5 7.5 7.5 7.5-3.367 7.5-7.5S13.133 1.5 9 1.5M9 15c-3.308 0-6-2.693-6-6 0-3.308 2.692-6 6-6 3.307 0 6 2.692 6 6 0 3.307-2.693 6-6 6" /></g><defs><clipPath id="configuration-add-tomato_a"><path fill="#fff" d="M0 0h18v18H0z" /></clipPath></defs></symbol>'});r().add(ke);var xe=new(e())({id:"configuration-remove-tomato",use:"configuration-remove-tomato-usage",viewBox:"0 0 18 18",content:'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18" id="configuration-remove-tomato"><g fill="#A8B64F" clip-path="url(#configuration-remove-tomato_a)"><path d="M9 1.5C4.867 1.5 1.5 4.867 1.5 9s3.367 7.5 7.5 7.5 7.5-3.367 7.5-7.5S13.133 1.5 9 1.5M9 15c-3.308 0-6-2.693-6-6 0-3.308 2.692-6 6-6 3.307 0 6 2.692 6 6 0 3.307-2.693 6-6 6" /><path d="M5.25 8.25h7.5v1.5h-7.5z" /></g><defs><clipPath id="configuration-remove-tomato_a"><path fill="#fff" d="M0 0h18v18H0z" /></clipPath></defs></symbol>'});r().add(xe);var Ee=new(e())({id:"configuration-edit",use:"configuration-edit-usage",viewBox:"0 0 18 18",content:'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18" id="configuration-edit"><g clip-path="url(#configuration-edit_a)"><path fill="#A8B64F" d="m10.545 6.765.69.69L4.44 14.25h-.69v-.69l6.795-6.795Zm2.7-4.515a.75.75 0 0 0-.525.217L11.347 3.84l2.813 2.813 1.373-1.373a.747.747 0 0 0 0-1.058l-1.755-1.755a.736.736 0 0 0-.533-.217Zm-2.7 2.393L2.25 12.937v2.813h2.813l8.294-8.295-2.812-2.813Z" /></g><defs><clipPath id="configuration-edit_a"><path fill="#fff" d="M0 0h18v18H0z" /></clipPath></defs></symbol>'});r().add(Ee);var Se=new(e())({id:"configuration-remove-task",use:"configuration-remove-task-usage",viewBox:"0 0 18 18",content:'<symbol xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 18" id="configuration-remove-task"><g clip-path="url(#configuration-remove-task_a)"><path fill="#A8B64F" d="M12 6.75v7.5H6v-7.5zm-1.125-4.5h-3.75l-.75.75H3.75v1.5h10.5V3h-2.625zm2.625 3h-9v9c0 .825.675 1.5 1.5 1.5h6c.825 0 1.5-.675 1.5-1.5z" /></g><defs><clipPath id="configuration-remove-task_a"><path fill="#fff" d="M0 0h18v18H0z" /></clipPath></defs></symbol>'});r().add(Se);var Oe=new(e())({id:"confirm-changing",use:"confirm-changing-usage",viewBox:"0 0 512 512",content:'<symbol xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" id="confirm-changing"><path d="M434.8 49 174.2 309.7l-97.4-97.4L0 289.2l174.1 174.1 22.5-22.4 315.1-315.1z" style="fill:#41ad49" /></symbol>'});r().add(Oe);const Be=__webpack_require__.p+"27fbd13a3cd103cf99b3.mp3",Ce=__webpack_require__.p+"19ae5c0f5f0f69836638.mp3";function Ae(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function Ie(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var Me,Le,Re,De,Ne,Pe,Fe,je,qe,Ue,ze,Ve,We,He,Ke,Ye={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},$e={duration:.5,overwrite:!1,delay:0},Ge=1e8,Xe=1e-8,Ze=2*Math.PI,Je=Ze/4,Qe=0,tn=Math.sqrt,en=Math.cos,nn=Math.sin,rn=function(t){return"string"==typeof t},on=function(t){return"function"==typeof t},an=function(t){return"number"==typeof t},sn=function(t){return void 0===t},un=function(t){return"object"==typeof t},cn=function(t){return!1!==t},ln=function(){return"undefined"!=typeof window},fn=function(t){return on(t)||rn(t)},dn="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},pn=Array.isArray,hn=/(?:-?\.?\d|\.)+/gi,mn=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,gn=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,_n=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,vn=/[+-]=-?[.\d]+/,yn=/[^,'"\[\]\s]+/gi,bn=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,wn={},Tn={},kn=function(t){return(Tn=Jn(t,wn))&&Qi},xn=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},En=function(t,e){return!e&&console.warn(t)},Sn=function(t,e){return t&&(wn[t]=e)&&Tn&&(Tn[t]=e)||wn},On=function(){return 0},Bn={suppressEvents:!0,isStart:!0,kill:!1},Cn={suppressEvents:!0,kill:!1},An={suppressEvents:!0},In={},Mn=[],Ln={},Rn={},Dn={},Nn=30,Pn=[],Fn="",jn=function(t){var e,n,r=t[0];if(un(r)||on(r)||(t=[t]),!(e=(r._gsap||{}).harness)){for(n=Pn.length;n--&&!Pn[n].targetTest(r););e=Pn[n]}for(n=t.length;n--;)t[n]&&(t[n]._gsap||(t[n]._gsap=new pi(t[n],e)))||t.splice(n,1);return t},qn=function(t){return t._gsap||jn(Ar(t))[0]._gsap},Un=function(t,e,n){return(n=t[e])&&on(n)?t[e]():sn(n)&&t.getAttribute&&t.getAttribute(e)||n},zn=function(t,e){return(t=t.split(",")).forEach(e)||t},Vn=function(t){return Math.round(1e5*t)/1e5||0},Wn=function(t){return Math.round(1e7*t)/1e7||0},Hn=function(t,e){var n=e.charAt(0),r=parseFloat(e.substr(2));return t=parseFloat(t),"+"===n?t+r:"-"===n?t-r:"*"===n?t*r:t/r},Kn=function(t,e){for(var n=e.length,r=0;t.indexOf(e[r])<0&&++r<n;);return r<n},Yn=function(){var t,e,n=Mn.length,r=Mn.slice(0);for(Ln={},Mn.length=0,t=0;t<n;t++)(e=r[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},$n=function(t,e,n,r){Mn.length&&!Le&&Yn(),t.render(e,n,r||Le&&e<0&&(t._initted||t._startAt)),Mn.length&&!Le&&Yn()},Gn=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(yn).length<2?e:rn(t)?t.trim():t},Xn=function(t){return t},Zn=function(t,e){for(var n in e)n in t||(t[n]=e[n]);return t},Jn=function(t,e){for(var n in e)t[n]=e[n];return t},Qn=function t(e,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(e[r]=un(n[r])?t(e[r]||(e[r]={}),n[r]):n[r]);return e},tr=function(t,e){var n,r={};for(n in t)n in e||(r[n]=t[n]);return r},er=function(t){var e,n=t.parent||De,r=t.keyframes?(e=pn(t.keyframes),function(t,n){for(var r in n)r in t||"duration"===r&&e||"ease"===r||(t[r]=n[r])}):Zn;if(cn(t.inherit))for(;n;)r(t,n.vars.defaults),n=n.parent||n._dp;return t},nr=function(t,e,n,r,i){void 0===n&&(n="_first"),void 0===r&&(r="_last");var o,a=t[r];if(i)for(o=e[i];a&&a[i]>o;)a=a._prev;return a?(e._next=a._next,a._next=e):(e._next=t[n],t[n]=e),e._next?e._next._prev=e:t[r]=e,e._prev=a,e.parent=e._dp=t,e},rr=function(t,e,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i=e._prev,o=e._next;i?i._next=o:t[n]===e&&(t[n]=o),o?o._prev=i:t[r]===e&&(t[r]=i),e._next=e._prev=e.parent=null},ir=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove&&t.parent.remove(t),t._act=0},or=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var n=t;n;)n._dirty=1,n=n.parent;return t},ar=function(t,e,n,r){return t._startAt&&(Le?t._startAt.revert(Cn):t.vars.immediateRender&&!t.vars.autoRevert||t._startAt.render(e,!0,r))},sr=function t(e){return!e||e._ts&&t(e.parent)},ur=function(t){return t._repeat?cr(t._tTime,t=t.duration()+t._rDelay)*t:0},cr=function(t,e){var n=Math.floor(t/=e);return t&&n===t?n-1:n},lr=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},fr=function(t){return t._end=Wn(t._start+(t._tDur/Math.abs(t._ts||t._rts||Xe)||0))},dr=function(t,e){var n=t._dp;return n&&n.smoothChildTiming&&t._ts&&(t._start=Wn(n._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),fr(t),n._dirty||or(n,t)),t},pr=function(t,e){var n;if((e._time||!e._dur&&e._initted||e._start<t._time&&(e._dur||!e.add))&&(n=lr(t.rawTime(),e),(!e._dur||Er(0,e.totalDuration(),n)-e._tTime>Xe)&&e.render(n,!0)),or(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(n=t;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;t._zTime=-1e-8}},hr=function(t,e,n,r){return e.parent&&ir(e),e._start=Wn((an(n)?n:n||t!==De?Tr(t,n,e):t._time)+e._delay),e._end=Wn(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),nr(t,e,"_first","_last",t._sort?"_start":0),vr(e)||(t._recent=e),r||pr(t,e),t._ts<0&&dr(t,t._tTime),t},mr=function(t,e){return(wn.ScrollTrigger||xn("scrollTrigger",e))&&wn.ScrollTrigger.create(e,t)},gr=function(t,e,n,r,i){return wi(t,e,i),t._initted?!n&&t._pt&&!Le&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&qe!==ti.frame?(Mn.push(t),t._lazy=[i,r],1):void 0:1},_r=function t(e){var n=e.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||t(n))},vr=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},yr=function(t,e,n,r){var i=t._repeat,o=Wn(e)||0,a=t._tTime/t._tDur;return a&&!r&&(t._time*=o/t._dur),t._dur=o,t._tDur=i?i<0?1e10:Wn(o*(i+1)+t._rDelay*i):o,a>0&&!r&&dr(t,t._tTime=t._tDur*a),t.parent&&fr(t),n||or(t.parent,t),t},br=function(t){return t instanceof mi?or(t):yr(t,t._dur)},wr={_start:0,endTime:On,totalDuration:On},Tr=function t(e,n,r){var i,o,a,s=e.labels,u=e._recent||wr,c=e.duration()>=Ge?u.endTime(!1):e._dur;return rn(n)&&(isNaN(n)||n in s)?(o=n.charAt(0),a="%"===n.substr(-1),i=n.indexOf("="),"<"===o||">"===o?(i>=0&&(n=n.replace(/=/,"")),("<"===o?u._start:u.endTime(u._repeat>=0))+(parseFloat(n.substr(1))||0)*(a?(i<0?u:r).totalDuration()/100:1)):i<0?(n in s||(s[n]=c),s[n]):(o=parseFloat(n.charAt(i-1)+n.substr(i+1)),a&&r&&(o=o/100*(pn(r)?r[0]:r).totalDuration()),i>1?t(e,n.substr(0,i-1),r)+o:c+o)):null==n?c:+n},kr=function(t,e,n){var r,i,o=an(e[1]),a=(o?2:1)+(t<2?0:1),s=e[a];if(o&&(s.duration=e[1]),s.parent=n,t){for(r=s,i=n;i&&!("immediateRender"in r);)r=i.vars.defaults||{},i=cn(i.vars.inherit)&&i.parent;s.immediateRender=cn(r.immediateRender),t<2?s.runBackwards=1:s.startAt=e[a-1]}return new Si(e[0],s,e[a+1])},xr=function(t,e){return t||0===t?e(t):e},Er=function(t,e,n){return n<t?t:n>e?e:n},Sr=function(t,e){return rn(t)&&(e=bn.exec(t))?e[1]:""},Or=[].slice,Br=function(t,e){return t&&un(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&un(t[0]))&&!t.nodeType&&t!==Ne},Cr=function(t,e,n){return void 0===n&&(n=[]),t.forEach((function(t){var r;return rn(t)&&!e||Br(t,1)?(r=n).push.apply(r,Ar(t)):n.push(t)}))||n},Ar=function(t,e,n){return Re&&!e&&Re.selector?Re.selector(t):!rn(t)||n||!Pe&&ei()?pn(t)?Cr(t,n):Br(t)?Or.call(t,0):t?[t]:[]:Or.call((e||Fe).querySelectorAll(t),0)},Ir=function(t){return t=Ar(t)[0]||En("Invalid scope")||{},function(e){var n=t.current||t.nativeElement||t;return Ar(e,n.querySelectorAll?n:n===t?En("Invalid scope")||Fe.createElement("div"):t)}},Mr=function(t){return t.sort((function(){return.5-Math.random()}))},Lr=function(t){if(on(t))return t;var e=un(t)?t:{each:t},n=ui(e.ease),r=e.from||0,i=parseFloat(e.base)||0,o={},a=r>0&&r<1,s=isNaN(r)||a,u=e.axis,c=r,l=r;return rn(r)?c=l={center:.5,edges:.5,end:1}[r]||0:!a&&s&&(c=r[0],l=r[1]),function(t,a,f){var d,p,h,m,g,_,v,y,b,w=(f||e).length,T=o[w];if(!T){if(!(b="auto"===e.grid?0:(e.grid||[1,Ge])[1])){for(v=-Ge;v<(v=f[b++].getBoundingClientRect().left)&&b<w;);b<w&&b--}for(T=o[w]=[],d=s?Math.min(b,w)*c-.5:r%b,p=b===Ge?0:s?w*l/b-.5:r/b|0,v=0,y=Ge,_=0;_<w;_++)h=_%b-d,m=p-(_/b|0),T[_]=g=u?Math.abs("y"===u?m:h):tn(h*h+m*m),g>v&&(v=g),g<y&&(y=g);"random"===r&&Mr(T),T.max=v-y,T.min=y,T.v=w=(parseFloat(e.amount)||parseFloat(e.each)*(b>w?w-1:u?"y"===u?w/b:b:Math.max(b,w/b))||0)*("edges"===r?-1:1),T.b=w<0?i-w:i,T.u=Sr(e.amount||e.each)||0,n=n&&w<0?ai(n):n}return w=(T[t]-T.min)/T.max||0,Wn(T.b+(n?n(w):w)*T.v)+T.u}},Rr=function(t){var e=Math.pow(10,((t+"").split(".")[1]||"").length);return function(n){var r=Wn(Math.round(parseFloat(n)/t)*t*e);return(r-r%1)/e+(an(n)?0:Sr(n))}},Dr=function(t,e){var n,r,i=pn(t);return!i&&un(t)&&(n=i=t.radius||Ge,t.values?(t=Ar(t.values),(r=!an(t[0]))&&(n*=n)):t=Rr(t.increment)),xr(e,i?on(t)?function(e){return r=t(e),Math.abs(r-e)<=n?r:e}:function(e){for(var i,o,a=parseFloat(r?e.x:e),s=parseFloat(r?e.y:0),u=Ge,c=0,l=t.length;l--;)(i=r?(i=t[l].x-a)*i+(o=t[l].y-s)*o:Math.abs(t[l]-a))<u&&(u=i,c=l);return c=!n||u<=n?t[c]:e,r||c===e||an(e)?c:c+Sr(e)}:Rr(t))},Nr=function(t,e,n,r){return xr(pn(t)?!e:!0===n?!!(n=0):!r,(function(){return pn(t)?t[~~(Math.random()*t.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((t-n/2+Math.random()*(e-t+.99*n))/n)*n*r)/r}))},Pr=function(t,e,n){return xr(n,(function(n){return t[~~e(n)]}))},Fr=function(t){for(var e,n,r,i,o=0,a="";~(e=t.indexOf("random(",o));)r=t.indexOf(")",e),i="["===t.charAt(e+7),n=t.substr(e+7,r-e-7).match(i?yn:hn),a+=t.substr(o,e-o)+Nr(i?n:+n[0],i?0:+n[1],+n[2]||1e-5),o=r+1;return a+t.substr(o,t.length-o)},jr=function(t,e,n,r,i){var o=e-t,a=r-n;return xr(i,(function(e){return n+((e-t)/o*a||0)}))},qr=function(t,e,n){var r,i,o,a=t.labels,s=Ge;for(r in a)(i=a[r]-e)<0==!!n&&i&&s>(i=Math.abs(i))&&(o=r,s=i);return o},Ur=function(t,e,n){var r,i,o,a=t.vars,s=a[e],u=Re,c=t._ctx;if(s)return r=a[e+"Params"],i=a.callbackScope||t,n&&Mn.length&&Yn(),c&&(Re=c),o=r?s.apply(i,r):s.call(i),Re=u,o},zr=function(t){return ir(t),t.scrollTrigger&&t.scrollTrigger.kill(!!Le),t.progress()<1&&Ur(t,"onInterrupt"),t},Vr=[],Wr=function(t){if(ln()&&t){var e=(t=!t.name&&t.default||t).name,n=on(t),r=e&&!n&&t.init?function(){this._props=[]}:t,i={init:On,render:Di,add:yi,kill:Pi,modifier:Ni,rawVars:0},o={targetTest:0,get:0,getSetter:Ii,aliases:{},register:0};if(ei(),t!==r){if(Rn[e])return;Zn(r,Zn(tr(t,i),o)),Jn(r.prototype,Jn(i,tr(t,o))),Rn[r.prop=e]=r,t.targetTest&&(Pn.push(r),In[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}Sn(e,r),t.register&&t.register(Qi,r,qi)}else t&&Vr.push(t)},Hr=255,Kr={aqua:[0,Hr,Hr],lime:[0,Hr,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Hr],navy:[0,0,128],white:[Hr,Hr,Hr],olive:[128,128,0],yellow:[Hr,Hr,0],orange:[Hr,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Hr,0,0],pink:[Hr,192,203],cyan:[0,Hr,Hr],transparent:[Hr,Hr,Hr,0]},Yr=function(t,e,n){return(6*(t+=t<0?1:t>1?-1:0)<1?e+(n-e)*t*6:t<.5?n:3*t<2?e+(n-e)*(2/3-t)*6:e)*Hr+.5|0},$r=function(t,e,n){var r,i,o,a,s,u,c,l,f,d,p=t?an(t)?[t>>16,t>>8&Hr,t&Hr]:0:Kr.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Kr[t])p=Kr[t];else if("#"===t.charAt(0)){if(t.length<6&&(r=t.charAt(1),i=t.charAt(2),o=t.charAt(3),t="#"+r+r+i+i+o+o+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Hr,p&Hr,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Hr,t&Hr]}else if("hsl"===t.substr(0,3))if(p=d=t.match(hn),e){if(~t.indexOf("="))return p=t.match(mn),n&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,s=+p[1]/100,r=2*(u=+p[2]/100)-(i=u<=.5?u*(s+1):u+s-u*s),p.length>3&&(p[3]*=1),p[0]=Yr(a+1/3,r,i),p[1]=Yr(a,r,i),p[2]=Yr(a-1/3,r,i);else p=t.match(hn)||Kr.transparent;p=p.map(Number)}return e&&!d&&(r=p[0]/Hr,i=p[1]/Hr,o=p[2]/Hr,u=((c=Math.max(r,i,o))+(l=Math.min(r,i,o)))/2,c===l?a=s=0:(f=c-l,s=u>.5?f/(2-c-l):f/(c+l),a=c===r?(i-o)/f+(i<o?6:0):c===i?(o-r)/f+2:(r-i)/f+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*s+.5),p[2]=~~(100*u+.5)),n&&p.length<4&&(p[3]=1),p},Gr=function(t){var e=[],n=[],r=-1;return t.split(Zr).forEach((function(t){var i=t.match(gn)||[];e.push.apply(e,i),n.push(r+=i.length+1)})),e.c=n,e},Xr=function(t,e,n){var r,i,o,a,s="",u=(t+s).match(Zr),c=e?"hsla(":"rgba(",l=0;if(!u)return t;if(u=u.map((function(t){return(t=$r(t,e,1))&&c+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),n&&(o=Gr(t),(r=n.c).join(s)!==o.c.join(s)))for(a=(i=t.replace(Zr,"1").split(gn)).length-1;l<a;l++)s+=i[l]+(~r.indexOf(l)?u.shift()||c+"0,0,0,0)":(o.length?o:u.length?u:n).shift());if(!i)for(a=(i=t.split(Zr)).length-1;l<a;l++)s+=i[l]+u[l];return s+i[a]},Zr=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Kr)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Jr=/hsl[a]?\(/,Qr=function(t){var e,n=t.join(" ");if(Zr.lastIndex=0,Zr.test(n))return e=Jr.test(n),t[1]=Xr(t[1],e),t[0]=Xr(t[0],e,Gr(t[1])),!0},ti=function(){var t,e,n,r,i,o,a=Date.now,s=500,u=33,c=a(),l=c,f=1e3/240,d=f,p=[],h=function n(h){var m,g,_,v,y=a()-l,b=!0===h;if(y>s&&(c+=y-u),((m=(_=(l+=y)-c)-d)>0||b)&&(v=++r.frame,i=_-1e3*r.time,r.time=_/=1e3,d+=m+(m>=f?4:f-m),g=1),b||(t=e(n)),g)for(o=0;o<p.length;o++)p[o](_,i,v,h)};return r={time:0,frame:0,tick:function(){h(!0)},deltaRatio:function(t){return i/(1e3/(t||60))},wake:function(){je&&(!Pe&&ln()&&(Ne=Pe=window,Fe=Ne.document||{},wn.gsap=Qi,(Ne.gsapVersions||(Ne.gsapVersions=[])).push(Qi.version),kn(Tn||Ne.GreenSockGlobals||!Ne.gsap&&Ne||{}),n=Ne.requestAnimationFrame,Vr.forEach(Wr)),t&&r.sleep(),e=n||function(t){return setTimeout(t,d-1e3*r.time+1|0)},ze=1,h(2))},sleep:function(){(n?Ne.cancelAnimationFrame:clearTimeout)(t),ze=0,e=On},lagSmoothing:function(t,e){s=t||1/0,u=Math.min(e||33,s)},fps:function(t){f=1e3/(t||240),d=1e3*r.time+f},add:function(t,e,n){var i=e?function(e,n,o,a){t(e,n,o,a),r.remove(i)}:t;return r.remove(t),p[n?"unshift":"push"](i),ei(),i},remove:function(t,e){~(e=p.indexOf(t))&&p.splice(e,1)&&o>=e&&o--},_listeners:p}}(),ei=function(){return!ze&&ti.wake()},ni={},ri=/^[\d.\-M][\d.\-,\s]/,ii=/["']/g,oi=function(t){for(var e,n,r,i={},o=t.substr(1,t.length-3).split(":"),a=o[0],s=1,u=o.length;s<u;s++)n=o[s],e=s!==u-1?n.lastIndexOf(","):n.length,r=n.substr(0,e),i[a]=isNaN(r)?r.replace(ii,"").trim():+r,a=n.substr(e+1).trim();return i},ai=function(t){return function(e){return 1-t(1-e)}},si=function t(e,n){for(var r,i=e._first;i;)i instanceof mi?t(i,n):!i.vars.yoyoEase||i._yoyo&&i._repeat||i._yoyo===n||(i.timeline?t(i.timeline,n):(r=i._ease,i._ease=i._yEase,i._yEase=r,i._yoyo=n)),i=i._next},ui=function(t,e){return t&&(on(t)?t:ni[t]||function(t){var e,n,r,i,o=(t+"").split("("),a=ni[o[0]];return a&&o.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[oi(o[1])]:(e=t,n=e.indexOf("(")+1,r=e.indexOf(")"),i=e.indexOf("(",n),e.substring(n,~i&&i<r?e.indexOf(")",r+1):r)).split(",").map(Gn)):ni._CE&&ri.test(t)?ni._CE("",t):a}(t))||e},ci=function(t,e,n,r){void 0===n&&(n=function(t){return 1-e(1-t)}),void 0===r&&(r=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var i,o={easeIn:e,easeOut:n,easeInOut:r};return zn(t,(function(t){for(var e in ni[t]=wn[t]=o,ni[i=t.toLowerCase()]=n,o)ni[i+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=ni[t+"."+e]=o[e]})),o},li=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},fi=function t(e,n,r){var i=n>=1?n:1,o=(r||(e?.3:.45))/(n<1?n:1),a=o/Ze*(Math.asin(1/i)||0),s=function(t){return 1===t?1:i*Math.pow(2,-10*t)*nn((t-a)*o)+1},u="out"===e?s:"in"===e?function(t){return 1-s(1-t)}:li(s);return o=Ze/o,u.config=function(n,r){return t(e,n,r)},u},di=function t(e,n){void 0===n&&(n=1.70158);var r=function(t){return t?--t*t*((n+1)*t+n)+1:0},i="out"===e?r:"in"===e?function(t){return 1-r(1-t)}:li(r);return i.config=function(n){return t(e,n)},i};zn("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var n=e<5?e+1:e;ci(t+",Power"+(n-1),e?function(t){return Math.pow(t,n)}:function(t){return t},(function(t){return 1-Math.pow(1-t,n)}),(function(t){return t<.5?Math.pow(2*t,n)/2:1-Math.pow(2*(1-t),n)/2}))})),ni.Linear.easeNone=ni.none=ni.Linear.easeIn,ci("Elastic",fi("in"),fi("out"),fi()),Ve=7.5625,He=1/(We=2.75),ci("Bounce",(function(t){return 1-Ke(1-t)}),Ke=function(t){return t<He?Ve*t*t:t<.7272727272727273?Ve*Math.pow(t-1.5/We,2)+.75:t<.9090909090909092?Ve*(t-=2.25/We)*t+.9375:Ve*Math.pow(t-2.625/We,2)+.984375}),ci("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),ci("Circ",(function(t){return-(tn(1-t*t)-1)})),ci("Sine",(function(t){return 1===t?1:1-en(t*Je)})),ci("Back",di("in"),di("out"),di()),ni.SteppedEase=ni.steps=wn.SteppedEase={config:function(t,e){void 0===t&&(t=1);var n=1/t,r=t+(e?0:1),i=e?1:0;return function(t){return((r*Er(0,.99999999,t)|0)+i)*n}}},$e.ease=ni["quad.out"],zn("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return Fn+=t+","+t+"Params,"}));var pi=function(t,e){this.id=Qe++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:Un,this.set=e?e.getSetter:Ii},hi=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,yr(this,+t.duration,1,1),this.data=t.data,Re&&(this._ctx=Re,Re.data.push(this)),ze||ti.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,yr(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(ei(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(dr(this,t),!n._dp||n.parent||pr(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&hr(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===Xe||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),$n(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+ur(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+ur(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*n,e):this._repeat?cr(this._tTime,n)+1:1},e.timeScale=function(t,e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var n=this.parent&&this._ts?lr(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,this.totalTime(Er(-Math.abs(this._delay),this._tDur,n),!1!==e),fr(this),function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t}(this)},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(ei(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==Xe&&(this._tTime-=Xe)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&hr(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(cn(t)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?lr(e.rawTime(t),this):this._tTime:this._tTime},e.revert=function(t){void 0===t&&(t=An);var e=Le;return Le=t,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(t),this.totalTime(-.01,t.suppressEvents)),"nested"!==this.data&&!1!==t.kill&&this.kill(),Le=e,this},e.globalTime=function(t){for(var e=this,n=arguments.length?t:e.rawTime();e;)n=e._start+n/(Math.abs(e._ts)||1),e=e._dp;return!this.parent&&this._sat?this._sat.globalTime(t):n},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,br(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,br(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(Tr(this,t),cn(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,cn(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,n=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=n&&t<this.endTime(!0)-Xe))},e.eventCallback=function(t,e,n){var r=this.vars;return arguments.length>1?(e?(r[t]=e,n&&(r[t+"Params"]=n),"onUpdate"===t&&(this._onUpdate=e)):delete r[t],this):r[t]},e.then=function(t){var e=this;return new Promise((function(n){var r=on(t)?t:Xn,i=function(){var t=e.then;e.then=null,on(r)&&(r=r(e))&&(r.then||r===e)&&(e.then=t),n(r),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?i():e._prom=i}))},e.kill=function(){zr(this)},t}();Zn(hi.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var mi=function(t){function e(e,n){var r;return void 0===e&&(e={}),(r=t.call(this,e)||this).labels={},r.smoothChildTiming=!!e.smoothChildTiming,r.autoRemoveChildren=!!e.autoRemoveChildren,r._sort=cn(e.sortChildren),De&&hr(e.parent||De,Ae(r),n),e.reversed&&r.reverse(),e.paused&&r.paused(!0),e.scrollTrigger&&mr(Ae(r),e.scrollTrigger),r}Ie(e,t);var n=e.prototype;return n.to=function(t,e,n){return kr(0,arguments,this),this},n.from=function(t,e,n){return kr(1,arguments,this),this},n.fromTo=function(t,e,n,r){return kr(2,arguments,this),this},n.set=function(t,e,n){return e.duration=0,e.parent=this,er(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new Si(t,e,Tr(this,n),1),this},n.call=function(t,e,n){return hr(this,Si.delayedCall(0,t,e),n)},n.staggerTo=function(t,e,n,r,i,o,a){return n.duration=e,n.stagger=n.stagger||r,n.onComplete=o,n.onCompleteParams=a,n.parent=this,new Si(t,n,Tr(this,i)),this},n.staggerFrom=function(t,e,n,r,i,o,a){return n.runBackwards=1,er(n).immediateRender=cn(n.immediateRender),this.staggerTo(t,e,n,r,i,o,a)},n.staggerFromTo=function(t,e,n,r,i,o,a,s){return r.startAt=n,er(r).immediateRender=cn(r.immediateRender),this.staggerTo(t,e,r,i,o,a,s)},n.render=function(t,e,n){var r,i,o,a,s,u,c,l,f,d,p,h,m=this._time,g=this._dirty?this.totalDuration():this._tDur,_=this._dur,v=t<=0?0:Wn(t),y=this._zTime<0!=t<0&&(this._initted||!_);if(this!==De&&v>g&&t>=0&&(v=g),v!==this._tTime||n||y){if(m!==this._time&&_&&(v+=this._time-m,t+=this._time-m),r=v,f=this._start,u=!(l=this._ts),y&&(_||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(p=this._yoyo,s=_+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*s+t,e,n);if(r=Wn(v%s),v===g?(a=this._repeat,r=_):((a=~~(v/s))&&a===v/s&&(r=_,a--),r>_&&(r=_)),d=cr(this._tTime,s),!m&&this._tTime&&d!==a&&this._tTime-d*s-this._dur<=0&&(d=a),p&&1&a&&(r=_-r,h=1),a!==d&&!this._lock){var b=p&&1&d,w=b===(p&&1&a);if(a<d&&(b=!b),m=b?0:v%_?_:v,this._lock=1,this.render(m||(h?0:Wn(a*s)),e,!_)._lock=0,this._tTime=v,!e&&this.parent&&Ur(this,"onRepeat"),this.vars.repeatRefresh&&!h&&(this.invalidate()._lock=1),m&&m!==this._time||u!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(_=this._dur,g=this._tDur,w&&(this._lock=2,m=b?_:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!h&&this.invalidate()),this._lock=0,!this._ts&&!u)return this;si(this,h)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(t,e,n){var r;if(n>e)for(r=t._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>e)return r;r=r._next}else for(r=t._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<e)return r;r=r._prev}}(this,Wn(m),Wn(r)),c&&(v-=r-(r=c._start))),this._tTime=v,this._time=r,this._act=!l,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&r&&!e&&!a&&(Ur(this,"onStart"),this._tTime!==v))return this;if(r>=m&&t>=0)for(i=this._first;i;){if(o=i._next,(i._act||r>=i._start)&&i._ts&&c!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(r-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(r-i._start)*i._ts,e,n),r!==this._time||!this._ts&&!u){c=0,o&&(v+=this._zTime=-1e-8);break}}i=o}else{i=this._last;for(var T=t<0?t:r;i;){if(o=i._prev,(i._act||T<=i._end)&&i._ts&&c!==i){if(i.parent!==this)return this.render(t,e,n);if(i.render(i._ts>0?(T-i._start)*i._ts:(i._dirty?i.totalDuration():i._tDur)+(T-i._start)*i._ts,e,n||Le&&(i._initted||i._startAt)),r!==this._time||!this._ts&&!u){c=0,o&&(v+=this._zTime=T?-1e-8:Xe);break}}i=o}}if(c&&!e&&(this.pause(),c.render(r>=m?0:-1e-8)._zTime=r>=m?1:-1,this._ts))return this._start=f,fr(this),this.render(t,e,n);this._onUpdate&&!e&&Ur(this,"onUpdate",!0),(v===g&&this._tTime>=this.totalDuration()||!v&&m)&&(f!==this._start&&Math.abs(l)===Math.abs(this._ts)||this._lock||((t||!_)&&(v===g&&this._ts>0||!v&&this._ts<0)&&ir(this,1),e||t<0&&!m||!v&&!m&&g||(Ur(this,v===g&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(v<g&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(t,e){var n=this;if(an(e)||(e=Tr(this,e,t)),!(t instanceof hi)){if(pn(t))return t.forEach((function(t){return n.add(t,e)})),this;if(rn(t))return this.addLabel(t,e);if(!on(t))return this;t=Si.delayedCall(0,t)}return this!==t?hr(this,t,e):this},n.getChildren=function(t,e,n,r){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===n&&(n=!0),void 0===r&&(r=-Ge);for(var i=[],o=this._first;o;)o._start>=r&&(o instanceof Si?e&&i.push(o):(n&&i.push(o),t&&i.push.apply(i,o.getChildren(!0,e,n)))),o=o._next;return i},n.getById=function(t){for(var e=this.getChildren(1,1,1),n=e.length;n--;)if(e[n].vars.id===t)return e[n]},n.remove=function(t){return rn(t)?this.removeLabel(t):on(t)?this.killTweensOf(t):(rr(this,t),t===this._recent&&(this._recent=this._last),or(this))},n.totalTime=function(e,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Wn(ti.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,n),this._forcing=0,this):this._tTime},n.addLabel=function(t,e){return this.labels[t]=Tr(this,e),this},n.removeLabel=function(t){return delete this.labels[t],this},n.addPause=function(t,e,n){var r=Si.delayedCall(0,e||On,n);return r.data="isPause",this._hasPause=1,hr(this,r,Tr(this,t))},n.removePause=function(t){var e=this._first;for(t=Tr(this,t);e;)e._start===t&&"isPause"===e.data&&ir(e),e=e._next},n.killTweensOf=function(t,e,n){for(var r=this.getTweensOf(t,n),i=r.length;i--;)gi!==r[i]&&r[i].kill(t,e);return this},n.getTweensOf=function(t,e){for(var n,r=[],i=Ar(t),o=this._first,a=an(e);o;)o instanceof Si?Kn(o._targets,i)&&(a?(!gi||o._initted&&o._ts)&&o.globalTime(0)<=e&&o.globalTime(o.totalDuration())>e:!e||o.isActive())&&r.push(o):(n=o.getTweensOf(i,e)).length&&r.push.apply(r,n),o=o._next;return r},n.tweenTo=function(t,e){e=e||{};var n,r=this,i=Tr(r,t),o=e,a=o.startAt,s=o.onStart,u=o.onStartParams,c=o.immediateRender,l=Si.to(r,Zn({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:i,overwrite:"auto",duration:e.duration||Math.abs((i-(a&&"time"in a?a.time:r._time))/r.timeScale())||Xe,onStart:function(){if(r.pause(),!n){var t=e.duration||Math.abs((i-(a&&"time"in a?a.time:r._time))/r.timeScale());l._dur!==t&&yr(l,t,0,1).render(l._time,!0,!0),n=1}s&&s.apply(l,u||[])}},e));return c?l.render(0):l},n.tweenFromTo=function(t,e,n){return this.tweenTo(e,Zn({startAt:{time:Tr(this,t)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(t){return void 0===t&&(t=this._time),qr(this,Tr(this,t))},n.previousLabel=function(t){return void 0===t&&(t=this._time),qr(this,Tr(this,t),1)},n.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+Xe)},n.shiftChildren=function(t,e,n){void 0===n&&(n=0);for(var r,i=this._first,o=this.labels;i;)i._start>=n&&(i._start+=t,i._end+=t),i=i._next;if(e)for(r in o)o[r]>=n&&(o[r]+=t);return or(this)},n.invalidate=function(e){var n=this._first;for(this._lock=0;n;)n.invalidate(e),n=n._next;return t.prototype.invalidate.call(this,e)},n.clear=function(t){void 0===t&&(t=!0);for(var e,n=this._first;n;)e=n._next,this.remove(n),n=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),or(this)},n.totalDuration=function(t){var e,n,r,i=0,o=this,a=o._last,s=Ge;if(arguments.length)return o.timeScale((o._repeat<0?o.duration():o.totalDuration())/(o.reversed()?-t:t));if(o._dirty){for(r=o.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(n=a._start)>s&&o._sort&&a._ts&&!o._lock?(o._lock=1,hr(o,a,n-a._delay,1)._lock=0):s=n,n<0&&a._ts&&(i-=n,(!r&&!o._dp||r&&r.smoothChildTiming)&&(o._start+=n/o._ts,o._time-=n,o._tTime-=n),o.shiftChildren(-n,!1,-Infinity),s=0),a._end>i&&a._ts&&(i=a._end),a=e;yr(o,o===De&&o._time>i?o._time:i,1,1),o._dirty=0}return o._tDur},e.updateRoot=function(t){if(De._ts&&($n(De,lr(t,De)),qe=ti.frame),ti.frame>=Nn){Nn+=Ye.autoSleep||120;var e=De._first;if((!e||!e._ts)&&Ye.autoSleep&&ti._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||ti.sleep()}}},e}(hi);Zn(mi.prototype,{_lock:0,_hasPause:0,_forcing:0});var gi,_i,vi=function(t,e,n,r,i,o,a){var s,u,c,l,f,d,p,h,m=new qi(this._pt,t,e,0,1,Ri,null,i),g=0,_=0;for(m.b=n,m.e=r,n+="",(p=~(r+="").indexOf("random("))&&(r=Fr(r)),o&&(o(h=[n,r],t,e),n=h[0],r=h[1]),u=n.match(_n)||[];s=_n.exec(r);)l=s[0],f=r.substring(g,s.index),c?c=(c+1)%5:"rgba("===f.substr(-5)&&(c=1),l!==u[_++]&&(d=parseFloat(u[_-1])||0,m._pt={_next:m._pt,p:f||1===_?f:",",s:d,c:"="===l.charAt(1)?Hn(d,l)-d:parseFloat(l)-d,m:c&&c<4?Math.round:0},g=_n.lastIndex);return m.c=g<r.length?r.substring(g,r.length):"",m.fp=a,(vn.test(r)||p)&&(m.e=0),this._pt=m,m},yi=function(t,e,n,r,i,o,a,s,u,c){on(r)&&(r=r(i||0,t,o));var l,f=t[e],d="get"!==n?n:on(f)?u?t[e.indexOf("set")||!on(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():f,p=on(f)?u?Ci:Bi:Oi;if(rn(r)&&(~r.indexOf("random(")&&(r=Fr(r)),"="===r.charAt(1)&&((l=Hn(d,r)+(Sr(d)||0))||0===l)&&(r=l)),!c||d!==r||_i)return isNaN(d*r)||""===r?(!f&&!(e in t)&&xn(e,r),vi.call(this,t,e,d,r,p,s||Ye.stringFilter,u)):(l=new qi(this._pt,t,e,+d||0,r-(d||0),"boolean"==typeof f?Li:Mi,0,p),u&&(l.fp=u),a&&l.modifier(a,this,t),this._pt=l)},bi=function(t,e,n,r,i,o){var a,s,u,c;if(Rn[t]&&!1!==(a=new Rn[t]).init(i,a.rawVars?e[t]:function(t,e,n,r,i){if(on(t)&&(t=ki(t,i,e,n,r)),!un(t)||t.style&&t.nodeType||pn(t)||dn(t))return rn(t)?ki(t,i,e,n,r):t;var o,a={};for(o in t)a[o]=ki(t[o],i,e,n,r);return a}(e[t],r,i,o,n),n,r,o)&&(n._pt=s=new qi(n._pt,i,t,0,1,a.render,a,0,a.priority),n!==Ue))for(u=n._ptLookup[n._targets.indexOf(i)],c=a._props.length;c--;)u[a._props[c]]=s;return a},wi=function t(e,n,r){var i,o,a,s,u,c,l,f,d,p,h,m,g,_=e.vars,v=_.ease,y=_.startAt,b=_.immediateRender,w=_.lazy,T=_.onUpdate,k=_.runBackwards,x=_.yoyoEase,E=_.keyframes,S=_.autoRevert,O=e._dur,B=e._startAt,C=e._targets,A=e.parent,I=A&&"nested"===A.data?A.vars.targets:C,M="auto"===e._overwrite&&!Me,L=e.timeline;if(L&&(!E||!v)&&(v="none"),e._ease=ui(v,$e.ease),e._yEase=x?ai(ui(!0===x?v:x,$e.ease)):0,x&&e._yoyo&&!e._repeat&&(x=e._yEase,e._yEase=e._ease,e._ease=x),e._from=!L&&!!_.runBackwards,!L||E&&!_.stagger){if(m=(f=C[0]?qn(C[0]).harness:0)&&_[f.prop],i=tr(_,In),B&&(B._zTime<0&&B.progress(1),n<0&&k&&b&&!S?B.render(-1,!0):B.revert(k&&O?Cn:Bn),B._lazy=0),y){if(ir(e._startAt=Si.set(C,Zn({data:"isStart",overwrite:!1,parent:A,immediateRender:!0,lazy:!B&&cn(w),startAt:null,delay:0,onUpdate:T&&function(){return Ur(e,"onUpdate")},stagger:0},y))),e._startAt._dp=0,e._startAt._sat=e,n<0&&(Le||!b&&!S)&&e._startAt.revert(Cn),b&&O&&n<=0&&r<=0)return void(n&&(e._zTime=n))}else if(k&&O&&!B)if(n&&(b=!1),a=Zn({overwrite:!1,data:"isFromStart",lazy:b&&!B&&cn(w),immediateRender:b,stagger:0,parent:A},i),m&&(a[f.prop]=m),ir(e._startAt=Si.set(C,a)),e._startAt._dp=0,e._startAt._sat=e,n<0&&(Le?e._startAt.revert(Cn):e._startAt.render(-1,!0)),e._zTime=n,b){if(!n)return}else t(e._startAt,Xe,Xe);for(e._pt=e._ptCache=0,w=O&&cn(w)||w&&!O,o=0;o<C.length;o++){if(l=(u=C[o])._gsap||jn(C)[o]._gsap,e._ptLookup[o]=p={},Ln[l.id]&&Mn.length&&Yn(),h=I===C?o:I.indexOf(u),f&&!1!==(d=new f).init(u,m||i,e,h,I)&&(e._pt=s=new qi(e._pt,u,d.name,0,1,d.render,d,0,d.priority),d._props.forEach((function(t){p[t]=s})),d.priority&&(c=1)),!f||m)for(a in i)Rn[a]&&(d=bi(a,i,e,h,u,I))?d.priority&&(c=1):p[a]=s=yi.call(e,u,a,"get",i[a],h,I,0,_.stringFilter);e._op&&e._op[o]&&e.kill(u,e._op[o]),M&&e._pt&&(gi=e,De.killTweensOf(u,p,e.globalTime(n)),g=!e.parent,gi=0),e._pt&&w&&(Ln[l.id]=1)}c&&ji(e),e._onInit&&e._onInit(e)}e._onUpdate=T,e._initted=(!e._op||e._pt)&&!g,E&&n<=0&&L.render(Ge,!0,!0)},Ti=function(t,e,n,r){var i,o,a=e.ease||r||"power1.inOut";if(pn(e))o=n[t]||(n[t]=[]),e.forEach((function(t,n){return o.push({t:n/(e.length-1)*100,v:t,e:a})}));else for(i in e)o=n[i]||(n[i]=[]),"ease"===i||o.push({t:parseFloat(t),v:e[i],e:a})},ki=function(t,e,n,r,i){return on(t)?t.call(e,n,r,i):rn(t)&&~t.indexOf("random(")?Fr(t):t},xi=Fn+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Ei={};zn(xi+",id,stagger,delay,duration,paused,scrollTrigger",(function(t){return Ei[t]=1}));var Si=function(t){function e(e,n,r,i){var o;"number"==typeof n&&(r.duration=n,n=r,r=null);var a,s,u,c,l,f,d,p,h=(o=t.call(this,i?n:er(n))||this).vars,m=h.duration,g=h.delay,_=h.immediateRender,v=h.stagger,y=h.overwrite,b=h.keyframes,w=h.defaults,T=h.scrollTrigger,k=h.yoyoEase,x=n.parent||De,E=(pn(e)||dn(e)?an(e[0]):"length"in n)?[e]:Ar(e);if(o._targets=E.length?jn(E):En("GSAP target "+e+" not found. https://gsap.com",!Ye.nullTargetWarn)||[],o._ptLookup=[],o._overwrite=y,b||v||fn(m)||fn(g)){if(n=o.vars,(a=o.timeline=new mi({data:"nested",defaults:w||{},targets:x&&"nested"===x.data?x.vars.targets:E})).kill(),a.parent=a._dp=Ae(o),a._start=0,v||fn(m)||fn(g)){if(c=E.length,d=v&&Lr(v),un(v))for(l in v)~xi.indexOf(l)&&(p||(p={}),p[l]=v[l]);for(s=0;s<c;s++)(u=tr(n,Ei)).stagger=0,k&&(u.yoyoEase=k),p&&Jn(u,p),f=E[s],u.duration=+ki(m,Ae(o),s,f,E),u.delay=(+ki(g,Ae(o),s,f,E)||0)-o._delay,!v&&1===c&&u.delay&&(o._delay=g=u.delay,o._start+=g,u.delay=0),a.to(f,u,d?d(s,f,E):0),a._ease=ni.none;a.duration()?m=g=0:o.timeline=0}else if(b){er(Zn(a.vars.defaults,{ease:"none"})),a._ease=ui(b.ease||n.ease||"none");var S,O,B,C=0;if(pn(b))b.forEach((function(t){return a.to(E,t,">")})),a.duration();else{for(l in u={},b)"ease"===l||"easeEach"===l||Ti(l,b[l],u,b.easeEach);for(l in u)for(S=u[l].sort((function(t,e){return t.t-e.t})),C=0,s=0;s<S.length;s++)(B={ease:(O=S[s]).e,duration:(O.t-(s?S[s-1].t:0))/100*m})[l]=O.v,a.to(E,B,C),C+=B.duration;a.duration()<m&&a.to({},{duration:m-a.duration()})}}m||o.duration(m=a.duration())}else o.timeline=0;return!0!==y||Me||(gi=Ae(o),De.killTweensOf(E),gi=0),hr(x,Ae(o),r),n.reversed&&o.reverse(),n.paused&&o.paused(!0),(_||!m&&!b&&o._start===Wn(x._time)&&cn(_)&&sr(Ae(o))&&"nested"!==x.data)&&(o._tTime=-1e-8,o.render(Math.max(0,-g)||0)),T&&mr(Ae(o),T),o}Ie(e,t);var n=e.prototype;return n.render=function(t,e,n){var r,i,o,a,s,u,c,l,f,d=this._time,p=this._tDur,h=this._dur,m=t<0,g=t>p-Xe&&!m?p:t<Xe?0:t;if(h){if(g!==this._tTime||!t||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==m){if(r=g,l=this.timeline,this._repeat){if(a=h+this._rDelay,this._repeat<-1&&m)return this.totalTime(100*a+t,e,n);if(r=Wn(g%a),g===p?(o=this._repeat,r=h):((o=~~(g/a))&&o===Wn(g/a)&&(r=h,o--),r>h&&(r=h)),(u=this._yoyo&&1&o)&&(f=this._yEase,r=h-r),s=cr(this._tTime,a),r===d&&!n&&this._initted&&o===s)return this._tTime=g,this;o!==s&&(l&&this._yEase&&si(l,u),this.vars.repeatRefresh&&!u&&!this._lock&&this._time!==h&&this._initted&&(this._lock=n=1,this.render(Wn(a*o),!0).invalidate()._lock=0))}if(!this._initted){if(gr(this,m?t:r,n,e,g))return this._tTime=0,this;if(!(d===this._time||n&&this.vars.repeatRefresh&&o!==s))return this;if(h!==this._dur)return this.render(t,e,n)}if(this._tTime=g,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=c=(f||this._ease)(r/h),this._from&&(this.ratio=c=1-c),r&&!d&&!e&&!o&&(Ur(this,"onStart"),this._tTime!==g))return this;for(i=this._pt;i;)i.r(c,i.d),i=i._next;l&&l.render(t<0?t:!r&&u?-1e-8:l._dur*l._ease(r/this._dur),e,n)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(m&&ar(this,t,0,n),Ur(this,"onUpdate")),this._repeat&&o!==s&&this.vars.onRepeat&&!e&&this.parent&&Ur(this,"onRepeat"),g!==this._tDur&&g||this._tTime!==g||(m&&!this._onUpdate&&ar(this,t,0,!0),(t||!h)&&(g===this._tDur&&this._ts>0||!g&&this._ts<0)&&ir(this,1),e||m&&!d||!(g||d||u)||(Ur(this,g===p?"onComplete":"onReverseComplete",!0),this._prom&&!(g<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,n,r){var i,o,a,s=t.ratio,u=e<0||!e&&(!t._start&&_r(t)&&(t._initted||!vr(t))||(t._ts<0||t._dp._ts<0)&&!vr(t))?0:1,c=t._rDelay,l=0;if(c&&t._repeat&&(l=Er(0,t._tDur,e),o=cr(l,c),t._yoyo&&1&o&&(u=1-u),o!==cr(t._tTime,c)&&(s=1-u,t.vars.repeatRefresh&&t._initted&&t.invalidate())),u!==s||Le||r||t._zTime===Xe||!e&&t._zTime){if(!t._initted&&gr(t,e,r,n,l))return;for(a=t._zTime,t._zTime=e||(n?Xe:0),n||(n=e&&!a),t.ratio=u,t._from&&(u=1-u),t._time=0,t._tTime=l,i=t._pt;i;)i.r(u,i.d),i=i._next;e<0&&ar(t,e,0,!0),t._onUpdate&&!n&&Ur(t,"onUpdate"),l&&t._repeat&&!n&&t.parent&&Ur(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===u&&(u&&ir(t,1),n||Le||(Ur(t,u?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,n);return this},n.targets=function(){return this._targets},n.invalidate=function(e){return(!e||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(e),t.prototype.invalidate.call(this,e)},n.resetTo=function(t,e,n,r,i){ze||ti.wake(),this._ts||this.play();var o=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||wi(this,o),function(t,e,n,r,i,o,a,s){var u,c,l,f,d=(t._pt&&t._ptCache||(t._ptCache={}))[e];if(!d)for(d=t._ptCache[e]=[],l=t._ptLookup,f=t._targets.length;f--;){if((u=l[f][e])&&u.d&&u.d._pt)for(u=u.d._pt;u&&u.p!==e&&u.fp!==e;)u=u._next;if(!u)return _i=1,t.vars[e]="+=0",wi(t,a),_i=0,s?En(e+" not eligible for reset"):1;d.push(u)}for(f=d.length;f--;)(u=(c=d[f])._pt||c).s=!r&&0!==r||i?u.s+(r||0)+o*u.c:r,u.c=n-u.s,c.e&&(c.e=Vn(n)+Sr(c.e)),c.b&&(c.b=u.s+Sr(c.b))}(this,t,e,n,r,this._ease(o/this._dur),o,i)?this.resetTo(t,e,n,r,1):(dr(this,0),this.parent||nr(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?zr(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,gi&&!0!==gi.vars.overwrite)._first||zr(this),this.parent&&n!==this.timeline.totalDuration()&&yr(this,this._dur*this.timeline._tDur/n,0,1),this}var r,i,o,a,s,u,c,l=this._targets,f=t?Ar(t):l,d=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var n=t.length,r=n===e.length;r&&n--&&t[n]===e[n];);return n<0}(l,f))return"all"===e&&(this._pt=0),zr(this);for(r=this._op=this._op||[],"all"!==e&&(rn(e)&&(s={},zn(e,(function(t){return s[t]=1})),e=s),e=function(t,e){var n,r,i,o,a=t[0]?qn(t[0]).harness:0,s=a&&a.aliases;if(!s)return e;for(r in n=Jn({},e),s)if(r in n)for(i=(o=s[r].split(",")).length;i--;)n[o[i]]=n[r];return n}(l,e)),c=l.length;c--;)if(~f.indexOf(l[c]))for(s in i=d[c],"all"===e?(r[c]=e,a=i,o={}):(o=r[c]=r[c]||{},a=e),a)(u=i&&i[s])&&("kill"in u.d&&!0!==u.d.kill(s)||rr(this,u,"_pt"),delete i[s]),"all"!==o&&(o[s]=1);return this._initted&&!this._pt&&p&&zr(this),this},e.to=function(t,n){return new e(t,n,arguments[2])},e.from=function(t,e){return kr(1,arguments)},e.delayedCall=function(t,n,r,i){return new e(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:i})},e.fromTo=function(t,e,n){return kr(2,arguments)},e.set=function(t,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new e(t,n)},e.killTweensOf=function(t,e,n){return De.killTweensOf(t,e,n)},e}(hi);Zn(Si.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),zn("staggerTo,staggerFrom,staggerFromTo",(function(t){Si[t]=function(){var e=new mi,n=Or.call(arguments,0);return n.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,n)}}));var Oi=function(t,e,n){return t[e]=n},Bi=function(t,e,n){return t[e](n)},Ci=function(t,e,n,r){return t[e](r.fp,n)},Ai=function(t,e,n){return t.setAttribute(e,n)},Ii=function(t,e){return on(t[e])?Bi:sn(t[e])&&t.setAttribute?Ai:Oi},Mi=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},Li=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},Ri=function(t,e){var n=e._pt,r="";if(!t&&e.b)r=e.b;else if(1===t&&e.e)r=e.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*t):Math.round(1e4*(n.s+n.c*t))/1e4)+r,n=n._next;r+=e.c}e.set(e.t,e.p,r,e)},Di=function(t,e){for(var n=e._pt;n;)n.r(t,n.d),n=n._next},Ni=function(t,e,n,r){for(var i,o=this._pt;o;)i=o._next,o.p===r&&o.modifier(t,e,n),o=i},Pi=function(t){for(var e,n,r=this._pt;r;)n=r._next,r.p===t&&!r.op||r.op===t?rr(this,r,"_pt"):r.dep||(e=1),r=n;return!e},Fi=function(t,e,n,r){r.mSet(t,e,r.m.call(r.tween,n,r.mt),r)},ji=function(t){for(var e,n,r,i,o=t._pt;o;){for(e=o._next,n=r;n&&n.pr>o.pr;)n=n._next;(o._prev=n?n._prev:i)?o._prev._next=o:r=o,(o._next=n)?n._prev=o:i=o,o=e}t._pt=r},qi=function(){function t(t,e,n,r,i,o,a,s,u){this.t=e,this.s=r,this.c=i,this.p=n,this.r=o||Mi,this.d=a||this,this.set=s||Oi,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,n){this.mSet=this.mSet||this.set,this.set=Fi,this.m=t,this.mt=n,this.tween=e},t}();zn(Fn+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return In[t]=1})),wn.TweenMax=wn.TweenLite=Si,wn.TimelineLite=wn.TimelineMax=mi,De=new mi({sortChildren:!1,defaults:$e,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),Ye.stringFilter=Qr;var Ui=[],zi={},Vi=[],Wi=0,Hi=0,Ki=function(t){return(zi[t]||Vi).map((function(t){return t()}))},Yi=function(){var t=Date.now(),e=[];t-Wi>2&&(Ki("matchMediaInit"),Ui.forEach((function(t){var n,r,i,o,a=t.queries,s=t.conditions;for(r in a)(n=Ne.matchMedia(a[r]).matches)&&(i=1),n!==s[r]&&(s[r]=n,o=1);o&&(t.revert(),i&&e.push(t))})),Ki("matchMediaRevert"),e.forEach((function(t){return t.onMatch(t,(function(e){return t.add(null,e)}))})),Wi=t,Ki("matchMedia"))},$i=function(){function t(t,e){this.selector=e&&Ir(e),this.data=[],this._r=[],this.isReverted=!1,this.id=Hi++,t&&this.add(t)}var e=t.prototype;return e.add=function(t,e,n){on(t)&&(n=e,e=t,t=on);var r=this,i=function(){var t,i=Re,o=r.selector;return i&&i!==r&&i.data.push(r),n&&(r.selector=Ir(n)),Re=r,t=e.apply(r,arguments),on(t)&&r._r.push(t),Re=i,r.selector=o,r.isReverted=!1,t};return r.last=i,t===on?i(r,(function(t){return r.add(null,t)})):t?r[t]=i:i},e.ignore=function(t){var e=Re;Re=null,t(this),Re=e},e.getTweens=function(){var e=[];return this.data.forEach((function(n){return n instanceof t?e.push.apply(e,n.getTweens()):n instanceof Si&&!(n.parent&&"nested"===n.parent.data)&&e.push(n)})),e},e.clear=function(){this._r.length=this.data.length=0},e.kill=function(t,e){var n=this;if(t?function(){for(var e,r=n.getTweens(),i=n.data.length;i--;)"isFlip"===(e=n.data[i]).data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(t){return r.splice(r.indexOf(t),1)})));for(r.map((function(t){return{g:t._dur||t._delay||t._sat&&!t._sat.vars.immediateRender?t.globalTime(0):-1/0,t}})).sort((function(t,e){return e.g-t.g||-1/0})).forEach((function(e){return e.t.revert(t)})),i=n.data.length;i--;)(e=n.data[i])instanceof mi?"nested"!==e.data&&(e.scrollTrigger&&e.scrollTrigger.revert(),e.kill()):!(e instanceof Si)&&e.revert&&e.revert(t);n._r.forEach((function(e){return e(t,n)})),n.isReverted=!0}():this.data.forEach((function(t){return t.kill&&t.kill()})),this.clear(),e)for(var r=Ui.length;r--;)Ui[r].id===this.id&&Ui.splice(r,1)},e.revert=function(t){this.kill(t||{})},t}(),Gi=function(){function t(t){this.contexts=[],this.scope=t}var e=t.prototype;return e.add=function(t,e,n){un(t)||(t={matches:t});var r,i,o,a=new $i(0,n||this.scope),s=a.conditions={};for(i in Re&&!a.selector&&(a.selector=Re.selector),this.contexts.push(a),e=a.add("onMatch",e),a.queries=t,t)"all"===i?o=1:(r=Ne.matchMedia(t[i]))&&(Ui.indexOf(a)<0&&Ui.push(a),(s[i]=r.matches)&&(o=1),r.addListener?r.addListener(Yi):r.addEventListener("change",Yi));return o&&e(a,(function(t){return a.add(null,t)})),this},e.revert=function(t){this.kill(t||{})},e.kill=function(t){this.contexts.forEach((function(e){return e.kill(t,!0)}))},t}(),Xi={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e.forEach((function(t){return Wr(t)}))},timeline:function(t){return new mi(t)},getTweensOf:function(t,e){return De.getTweensOf(t,e)},getProperty:function(t,e,n,r){rn(t)&&(t=Ar(t)[0]);var i=qn(t||{}).get,o=n?Xn:Gn;return"native"===n&&(n=""),t?e?o((Rn[e]&&Rn[e].get||i)(t,e,n,r)):function(e,n,r){return o((Rn[e]&&Rn[e].get||i)(t,e,n,r))}:t},quickSetter:function(t,e,n){if((t=Ar(t)).length>1){var r=t.map((function(t){return Qi.quickSetter(t,e,n)})),i=r.length;return function(t){for(var e=i;e--;)r[e](t)}}t=t[0]||{};var o=Rn[e],a=qn(t),s=a.harness&&(a.harness.aliases||{})[e]||e,u=o?function(e){var r=new o;Ue._pt=0,r.init(t,n?e+n:e,Ue,0,[t]),r.render(1,r),Ue._pt&&Di(1,Ue)}:a.set(t,s);return o?u:function(e){return u(t,s,n?e+n:e,a,1)}},quickTo:function(t,e,n){var r,i=Qi.to(t,Jn(((r={})[e]="+=0.1",r.paused=!0,r),n||{})),o=function(t,n,r){return i.resetTo(e,t,n,r)};return o.tween=i,o},isTweening:function(t){return De.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=ui(t.ease,$e.ease)),Qn($e,t||{})},config:function(t){return Qn(Ye,t||{})},registerEffect:function(t){var e=t.name,n=t.effect,r=t.plugins,i=t.defaults,o=t.extendTimeline;(r||"").split(",").forEach((function(t){return t&&!Rn[t]&&!wn[t]&&En(e+" effect requires "+t+" plugin.")})),Dn[e]=function(t,e,r){return n(Ar(t),Zn(e||{},i),r)},o&&(mi.prototype[e]=function(t,n,r){return this.add(Dn[e](t,un(n)?n:(r=n)&&{},this),r)})},registerEase:function(t,e){ni[t]=ui(e)},parseEase:function(t,e){return arguments.length?ui(t,e):ni},getById:function(t){return De.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var n,r,i=new mi(t);for(i.smoothChildTiming=cn(t.smoothChildTiming),De.remove(i),i._dp=0,i._time=i._tTime=De._time,n=De._first;n;)r=n._next,!e&&!n._dur&&n instanceof Si&&n.vars.onComplete===n._targets[0]||hr(i,n,n._start-n._delay),n=r;return hr(De,i,0),i},context:function(t,e){return t?new $i(t,e):Re},matchMedia:function(t){return new Gi(t)},matchMediaRefresh:function(){return Ui.forEach((function(t){var e,n,r=t.conditions;for(n in r)r[n]&&(r[n]=!1,e=1);e&&t.revert()}))||Yi()},addEventListener:function(t,e){var n=zi[t]||(zi[t]=[]);~n.indexOf(e)||n.push(e)},removeEventListener:function(t,e){var n=zi[t],r=n&&n.indexOf(e);r>=0&&n.splice(r,1)},utils:{wrap:function t(e,n,r){var i=n-e;return pn(e)?Pr(e,t(0,e.length),n):xr(r,(function(t){return(i+(t-e)%i)%i+e}))},wrapYoyo:function t(e,n,r){var i=n-e,o=2*i;return pn(e)?Pr(e,t(0,e.length-1),n):xr(r,(function(t){return e+((t=(o+(t-e)%o)%o||0)>i?o-t:t)}))},distribute:Lr,random:Nr,snap:Dr,normalize:function(t,e,n){return jr(t,e,0,1,n)},getUnit:Sr,clamp:function(t,e,n){return xr(n,(function(n){return Er(t,e,n)}))},splitColor:$r,toArray:Ar,selector:Ir,mapRange:jr,pipe:function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(n){return t(parseFloat(n))+(e||Sr(n))}},interpolate:function t(e,n,r,i){var o=isNaN(e+n)?0:function(t){return(1-t)*e+t*n};if(!o){var a,s,u,c,l,f=rn(e),d={};if(!0===r&&(i=1)&&(r=null),f)e={p:e},n={p:n};else if(pn(e)&&!pn(n)){for(u=[],c=e.length,l=c-2,s=1;s<c;s++)u.push(t(e[s-1],e[s]));c--,o=function(t){t*=c;var e=Math.min(l,~~t);return u[e](t-e)},r=n}else i||(e=Jn(pn(e)?[]:{},e));if(!u){for(a in n)yi.call(d,e,a,"get",n[a]);o=function(t){return Di(t,d)||(f?e.p:e)}}}return xr(r,o)},shuffle:Mr},install:kn,effects:Dn,ticker:ti,updateRoot:mi.updateRoot,plugins:Rn,globalTimeline:De,core:{PropTween:qi,globals:Sn,Tween:Si,Timeline:mi,Animation:hi,getCache:qn,_removeLinkedListItem:rr,reverting:function(){return Le},context:function(t){return t&&Re&&(Re.data.push(t),t._ctx=Re),Re},suppressOverwrites:function(t){return Me=t}}};zn("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return Xi[t]=Si[t]})),ti.add(mi.updateRoot),Ue=Xi.to({},{duration:0});var Zi=function(t,e){for(var n=t._pt;n&&n.p!==e&&n.op!==e&&n.fp!==e;)n=n._next;return n},Ji=function(t,e){return{name:t,rawVars:1,init:function(t,n,r){r._onInit=function(t){var r,i;if(rn(n)&&(r={},zn(n,(function(t){return r[t]=1})),n=r),e){for(i in r={},n)r[i]=e(n[i]);n=r}!function(t,e){var n,r,i,o=t._targets;for(n in e)for(r=o.length;r--;)(i=t._ptLookup[r][n])&&(i=i.d)&&(i._pt&&(i=Zi(i,n)),i&&i.modifier&&i.modifier(e[n],t,o[r],n))}(t,n)}}}},Qi=Xi.registerPlugin({name:"attr",init:function(t,e,n,r,i){var o,a,s;for(o in this.tween=n,e)s=t.getAttribute(o)||"",(a=this.add(t,"setAttribute",(s||0)+"",e[o],r,i,0,0,o)).op=o,a.b=s,this._props.push(o)},render:function(t,e){for(var n=e._pt;n;)Le?n.set(n.t,n.p,n.b,n):n.r(t,n.d),n=n._next}},{name:"endArray",init:function(t,e){for(var n=e.length;n--;)this.add(t,n,t[n]||0,e[n],0,0,0,0,0,1)}},Ji("roundProps",Rr),Ji("modifiers"),Ji("snap",Dr))||Xi;Si.version=mi.version=Qi.version="3.12.3",je=1,ln()&&ei();ni.Power0,ni.Power1,ni.Power2,ni.Power3,ni.Power4,ni.Linear,ni.Quad,ni.Cubic,ni.Quart,ni.Quint,ni.Strong,ni.Elastic,ni.Back,ni.SteppedEase,ni.Bounce,ni.Sine,ni.Expo,ni.Circ;var to,eo,no,ro,io,oo,ao,so,uo={},co=180/Math.PI,lo=Math.PI/180,fo=Math.atan2,po=/([A-Z])/g,ho=/(left|right|width|margin|padding|x)/i,mo=/[\s,\(]\S/,go={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},_o=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},vo=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},yo=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},bo=function(t,e){var n=e.s+e.c*t;e.set(e.t,e.p,~~(n+(n<0?-.5:.5))+e.u,e)},wo=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},To=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},ko=function(t,e,n){return t.style[e]=n},xo=function(t,e,n){return t.style.setProperty(e,n)},Eo=function(t,e,n){return t._gsap[e]=n},So=function(t,e,n){return t._gsap.scaleX=t._gsap.scaleY=n},Oo=function(t,e,n,r,i){var o=t._gsap;o.scaleX=o.scaleY=n,o.renderTransform(i,o)},Bo=function(t,e,n,r,i){var o=t._gsap;o[e]=n,o.renderTransform(i,o)},Co="transform",Ao=Co+"Origin",Io=function t(e,n){var r=this,i=this.target,o=i.style,a=i._gsap;if(e in uo&&o){if(this.tfm=this.tfm||{},"transform"===e)return go.transform.split(",").forEach((function(e){return t.call(r,e,n)}));if(~(e=go[e]||e).indexOf(",")?e.split(",").forEach((function(t){return r.tfm[t]=Go(i,t)})):this.tfm[e]=a.x?a[e]:Go(i,e),e===Ao&&(this.tfm.zOrigin=a.zOrigin),this.props.indexOf(Co)>=0)return;a.svg&&(this.svgo=i.getAttribute("data-svg-origin"),this.props.push(Ao,n,"")),e=Co}(o||n)&&this.props.push(e,n,o[e])},Mo=function(t){t.translate&&(t.removeProperty("translate"),t.removeProperty("scale"),t.removeProperty("rotate"))},Lo=function(){var t,e,n=this.props,r=this.target,i=r.style,o=r._gsap;for(t=0;t<n.length;t+=3)n[t+1]?r[n[t]]=n[t+2]:n[t+2]?i[n[t]]=n[t+2]:i.removeProperty("--"===n[t].substr(0,2)?n[t]:n[t].replace(po,"-$1").toLowerCase());if(this.tfm){for(e in this.tfm)o[e]=this.tfm[e];o.svg&&(o.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),(t=ao())&&t.isStart||i[Co]||(Mo(i),o.zOrigin&&i[Ao]&&(i[Ao]+=" "+o.zOrigin+"px",o.zOrigin=0,o.renderTransform()),o.uncache=1)}},Ro=function(t,e){var n={target:t,props:[],revert:Lo,save:Io};return t._gsap||Qi.core.getCache(t),e&&e.split(",").forEach((function(t){return n.save(t)})),n},Do=function(t,e){var n=eo.createElementNS?eo.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):eo.createElement(t);return n&&n.style?n:eo.createElement(t)},No=function t(e,n,r){var i=getComputedStyle(e);return i[n]||i.getPropertyValue(n.replace(po,"-$1").toLowerCase())||i.getPropertyValue(n)||!r&&t(e,Fo(n)||n,1)||""},Po="O,Moz,ms,Ms,Webkit".split(","),Fo=function(t,e,n){var r=(e||io).style,i=5;if(t in r&&!n)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);i--&&!(Po[i]+t in r););return i<0?null:(3===i?"ms":i>=0?Po[i]:"")+t},jo=function(){"undefined"!=typeof window&&window.document&&(to=window,eo=to.document,no=eo.documentElement,io=Do("div")||{style:{}},Do("div"),Co=Fo(Co),Ao=Co+"Origin",io.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",so=!!Fo("perspective"),ao=Qi.core.reverting,ro=1)},qo=function t(e){var n,r=Do("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),i=this.parentNode,o=this.nextSibling,a=this.style.cssText;if(no.appendChild(r),r.appendChild(this),this.style.display="block",e)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(n=this._gsapBBox());return i&&(o?i.insertBefore(this,o):i.appendChild(this)),no.removeChild(r),this.style.cssText=a,n},Uo=function(t,e){for(var n=e.length;n--;)if(t.hasAttribute(e[n]))return t.getAttribute(e[n])},zo=function(t){var e;try{e=t.getBBox()}catch(n){e=qo.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===qo||(e=qo.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+Uo(t,["x","cx","x1"])||0,y:+Uo(t,["y","cy","y1"])||0,width:0,height:0}},Vo=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!zo(t))},Wo=function(t,e){if(e){var n,r=t.style;e in uo&&e!==Ao&&(e=Co),r.removeProperty?("ms"!==(n=e.substr(0,2))&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty("--"===n?e:e.replace(po,"-$1").toLowerCase())):r.removeAttribute(e)}},Ho=function(t,e,n,r,i,o){var a=new qi(t._pt,e,n,0,1,o?To:wo);return t._pt=a,a.b=r,a.e=i,t._props.push(n),a},Ko={deg:1,rad:1,turn:1},Yo={grid:1,flex:1},$o=function t(e,n,r,i){var o,a,s,u,c=parseFloat(r)||0,l=(r+"").trim().substr((c+"").length)||"px",f=io.style,d=ho.test(n),p="svg"===e.tagName.toLowerCase(),h=(p?"client":"offset")+(d?"Width":"Height"),m=100,g="px"===i,_="%"===i;if(i===l||!c||Ko[i]||Ko[l])return c;if("px"!==l&&!g&&(c=t(e,n,r,"px")),u=e.getCTM&&Vo(e),(_||"%"===l)&&(uo[n]||~n.indexOf("adius")))return o=u?e.getBBox()[d?"width":"height"]:e[h],Vn(_?c/o*m:c/100*o);if(f[d?"width":"height"]=m+(g?l:i),a=~n.indexOf("adius")||"em"===i&&e.appendChild&&!p?e:e.parentNode,u&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==eo&&a.appendChild||(a=eo.body),(s=a._gsap)&&_&&s.width&&d&&s.time===ti.time&&!s.uncache)return Vn(c/s.width*m);if(!_||"height"!==n&&"width"!==n)(_||"%"===l)&&!Yo[No(a,"display")]&&(f.position=No(e,"position")),a===e&&(f.position="static"),a.appendChild(io),o=io[h],a.removeChild(io),f.position="absolute";else{var v=e.style[n];e.style[n]=m+i,o=e[h],v?e.style[n]=v:Wo(e,n)}return d&&_&&((s=qn(a)).time=ti.time,s.width=a[h]),Vn(g?o*c/m:o&&c?m/o*c:0)},Go=function(t,e,n,r){var i;return ro||jo(),e in go&&"transform"!==e&&~(e=go[e]).indexOf(",")&&(e=e.split(",")[0]),uo[e]&&"transform"!==e?(i=aa(t,r),i="transformOrigin"!==e?i[e]:i.svg?i.origin:sa(No(t,Ao))+" "+i.zOrigin+"px"):(!(i=t.style[e])||"auto"===i||r||~(i+"").indexOf("calc("))&&(i=Qo[e]&&Qo[e](t,e,n)||No(t,e)||Un(t,e)||("opacity"===e?1:0)),n&&!~(i+"").trim().indexOf(" ")?$o(t,e,i,n)+n:i},Xo=function(t,e,n,r){if(!n||"none"===n){var i=Fo(e,t,1),o=i&&No(t,i,1);o&&o!==n?(e=i,n=o):"borderColor"===e&&(n=No(t,"borderTopColor"))}var a,s,u,c,l,f,d,p,h,m,g,_=new qi(this._pt,t.style,e,0,1,Ri),v=0,y=0;if(_.b=n,_.e=r,n+="","auto"===(r+="")&&(f=t.style[e],t.style[e]=r,r=No(t,e)||r,f?t.style[e]=f:Wo(t,e)),Qr(a=[n,r]),r=a[1],u=(n=a[0]).match(gn)||[],(r.match(gn)||[]).length){for(;s=gn.exec(r);)d=s[0],h=r.substring(v,s.index),l?l=(l+1)%5:"rgba("!==h.substr(-5)&&"hsla("!==h.substr(-5)||(l=1),d!==(f=u[y++]||"")&&(c=parseFloat(f)||0,g=f.substr((c+"").length),"="===d.charAt(1)&&(d=Hn(c,d)+g),p=parseFloat(d),m=d.substr((p+"").length),v=gn.lastIndex-m.length,m||(m=m||Ye.units[e]||g,v===r.length&&(r+=m,_.e+=m)),g!==m&&(c=$o(t,e,f,m)||0),_._pt={_next:_._pt,p:h||1===y?h:",",s:c,c:p-c,m:l&&l<4||"zIndex"===e?Math.round:0});_.c=v<r.length?r.substring(v,r.length):""}else _.r="display"===e&&"none"===r?To:wo;return vn.test(r)&&(_.e=0),this._pt=_,_},Zo={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},Jo=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var n,r,i,o=e.t,a=o.style,s=e.u,u=o._gsap;if("all"===s||!0===s)a.cssText="",r=1;else for(i=(s=s.split(",")).length;--i>-1;)n=s[i],uo[n]&&(r=1,n="transformOrigin"===n?Ao:Co),Wo(o,n);r&&(Wo(o,Co),u&&(u.svg&&o.removeAttribute("transform"),aa(o,1),u.uncache=1,Mo(a)))}},Qo={clearProps:function(t,e,n,r,i){if("isFromStart"!==i.data){var o=t._pt=new qi(t._pt,e,n,0,0,Jo);return o.u=r,o.pr=-10,o.tween=i,t._props.push(n),1}}},ta=[1,0,0,1,0,0],ea={},na=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},ra=function(t){var e=No(t,Co);return na(e)?ta:e.substr(7).match(mn).map(Vn)},ia=function(t,e){var n,r,i,o,a=t._gsap||qn(t),s=t.style,u=ra(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(i=t.transform.baseVal.consolidate().matrix).a,i.b,i.c,i.d,i.e,i.f]).join(",")?ta:u:(u!==ta||t.offsetParent||t===no||a.svg||(i=s.display,s.display="block",(n=t.parentNode)&&t.offsetParent||(o=1,r=t.nextElementSibling,no.appendChild(t)),u=ra(t),i?s.display=i:Wo(t,"display"),o&&(r?n.insertBefore(t,r):n?n.appendChild(t):no.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},oa=function(t,e,n,r,i,o){var a,s,u,c=t._gsap,l=i||ia(t,!0),f=c.xOrigin||0,d=c.yOrigin||0,p=c.xOffset||0,h=c.yOffset||0,m=l[0],g=l[1],_=l[2],v=l[3],y=l[4],b=l[5],w=e.split(" "),T=parseFloat(w[0])||0,k=parseFloat(w[1])||0;n?l!==ta&&(s=m*v-g*_)&&(u=T*(-g/s)+k*(m/s)-(m*b-g*y)/s,T=T*(v/s)+k*(-_/s)+(_*b-v*y)/s,k=u):(T=(a=zo(t)).x+(~w[0].indexOf("%")?T/100*a.width:T),k=a.y+(~(w[1]||w[0]).indexOf("%")?k/100*a.height:k),"xOrigin"in c||!T&&!k||(T-=a.x,k-=a.y)),r||!1!==r&&c.smooth?(y=T-f,b=k-d,c.xOffset=p+(y*m+b*_)-y,c.yOffset=h+(y*g+b*v)-b):c.xOffset=c.yOffset=0,c.xOrigin=T,c.yOrigin=k,c.smooth=!!r,c.origin=e,c.originIsAbsolute=!!n,t.style[Ao]="0px 0px",o&&(Ho(o,c,"xOrigin",f,T),Ho(o,c,"yOrigin",d,k),Ho(o,c,"xOffset",p,c.xOffset),Ho(o,c,"yOffset",h,c.yOffset)),t.setAttribute("data-svg-origin",T+" "+k)},aa=function(t,e){var n=t._gsap||new pi(t);if("x"in n&&!e&&!n.uncache)return n;var r,i,o,a,s,u,c,l,f,d,p,h,m,g,_,v,y,b,w,T,k,x,E,S,O,B,C,A,I,M,L,R,D=t.style,N=n.scaleX<0,P="px",F="deg",j=getComputedStyle(t),q=No(t,Ao)||"0";return r=i=o=u=c=l=f=d=p=0,a=s=1,n.svg=!(!t.getCTM||!Vo(t)),j.translate&&("none"===j.translate&&"none"===j.scale&&"none"===j.rotate||(D[Co]=("none"!==j.translate?"translate3d("+(j.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==j.rotate?"rotate("+j.rotate+") ":"")+("none"!==j.scale?"scale("+j.scale.split(" ").join(",")+") ":"")+("none"!==j[Co]?j[Co]:"")),D.scale=D.rotate=D.translate="none"),g=ia(t,n.svg),n.svg&&(n.uncache?(O=t.getBBox(),q=n.xOrigin-O.x+"px "+(n.yOrigin-O.y)+"px",S=""):S=!e&&t.getAttribute("data-svg-origin"),oa(t,S||q,!!S||n.originIsAbsolute,!1!==n.smooth,g)),h=n.xOrigin||0,m=n.yOrigin||0,g!==ta&&(b=g[0],w=g[1],T=g[2],k=g[3],r=x=g[4],i=E=g[5],6===g.length?(a=Math.sqrt(b*b+w*w),s=Math.sqrt(k*k+T*T),u=b||w?fo(w,b)*co:0,(f=T||k?fo(T,k)*co+u:0)&&(s*=Math.abs(Math.cos(f*lo))),n.svg&&(r-=h-(h*b+m*T),i-=m-(h*w+m*k))):(R=g[6],M=g[7],C=g[8],A=g[9],I=g[10],L=g[11],r=g[12],i=g[13],o=g[14],c=(_=fo(R,I))*co,_&&(S=x*(v=Math.cos(-_))+C*(y=Math.sin(-_)),O=E*v+A*y,B=R*v+I*y,C=x*-y+C*v,A=E*-y+A*v,I=R*-y+I*v,L=M*-y+L*v,x=S,E=O,R=B),l=(_=fo(-T,I))*co,_&&(v=Math.cos(-_),L=k*(y=Math.sin(-_))+L*v,b=S=b*v-C*y,w=O=w*v-A*y,T=B=T*v-I*y),u=(_=fo(w,b))*co,_&&(S=b*(v=Math.cos(_))+w*(y=Math.sin(_)),O=x*v+E*y,w=w*v-b*y,E=E*v-x*y,b=S,x=O),c&&Math.abs(c)+Math.abs(u)>359.9&&(c=u=0,l=180-l),a=Vn(Math.sqrt(b*b+w*w+T*T)),s=Vn(Math.sqrt(E*E+R*R)),_=fo(x,E),f=Math.abs(_)>2e-4?_*co:0,p=L?1/(L<0?-L:L):0),n.svg&&(S=t.getAttribute("transform"),n.forceCSS=t.setAttribute("transform","")||!na(No(t,Co)),S&&t.setAttribute("transform",S))),Math.abs(f)>90&&Math.abs(f)<270&&(N?(a*=-1,f+=u<=0?180:-180,u+=u<=0?180:-180):(s*=-1,f+=f<=0?180:-180)),e=e||n.uncache,n.x=r-((n.xPercent=r&&(!e&&n.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-r)?-50:0)))?t.offsetWidth*n.xPercent/100:0)+P,n.y=i-((n.yPercent=i&&(!e&&n.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-i)?-50:0)))?t.offsetHeight*n.yPercent/100:0)+P,n.z=o+P,n.scaleX=Vn(a),n.scaleY=Vn(s),n.rotation=Vn(u)+F,n.rotationX=Vn(c)+F,n.rotationY=Vn(l)+F,n.skewX=f+F,n.skewY=d+F,n.transformPerspective=p+P,(n.zOrigin=parseFloat(q.split(" ")[2])||!e&&n.zOrigin||0)&&(D[Ao]=sa(q)),n.svg||(n.xOffset=n.yOffset=0),n.force3D=Ye.force3D,n.renderTransform=n.svg?ha:so?pa:ca,n.uncache=0,n},sa=function(t){return(t=t.split(" "))[0]+" "+t[1]},ua=function(t,e,n){var r=Sr(e);return Vn(parseFloat(e)+parseFloat($o(t,"x",n+"px",r)))+r},ca=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,pa(t,e)},la="0deg",fa="0px",da=") ",pa=function(t,e){var n=e||this,r=n.xPercent,i=n.yPercent,o=n.x,a=n.y,s=n.z,u=n.rotation,c=n.rotationY,l=n.rotationX,f=n.skewX,d=n.skewY,p=n.scaleX,h=n.scaleY,m=n.transformPerspective,g=n.force3D,_=n.target,v=n.zOrigin,y="",b="auto"===g&&t&&1!==t||!0===g;if(v&&(l!==la||c!==la)){var w,T=parseFloat(c)*lo,k=Math.sin(T),x=Math.cos(T);T=parseFloat(l)*lo,w=Math.cos(T),o=ua(_,o,k*w*-v),a=ua(_,a,-Math.sin(T)*-v),s=ua(_,s,x*w*-v+v)}m!==fa&&(y+="perspective("+m+da),(r||i)&&(y+="translate("+r+"%, "+i+"%) "),(b||o!==fa||a!==fa||s!==fa)&&(y+=s!==fa||b?"translate3d("+o+", "+a+", "+s+") ":"translate("+o+", "+a+da),u!==la&&(y+="rotate("+u+da),c!==la&&(y+="rotateY("+c+da),l!==la&&(y+="rotateX("+l+da),f===la&&d===la||(y+="skew("+f+", "+d+da),1===p&&1===h||(y+="scale("+p+", "+h+da),_.style[Co]=y||"translate(0, 0)"},ha=function(t,e){var n,r,i,o,a,s=e||this,u=s.xPercent,c=s.yPercent,l=s.x,f=s.y,d=s.rotation,p=s.skewX,h=s.skewY,m=s.scaleX,g=s.scaleY,_=s.target,v=s.xOrigin,y=s.yOrigin,b=s.xOffset,w=s.yOffset,T=s.forceCSS,k=parseFloat(l),x=parseFloat(f);d=parseFloat(d),p=parseFloat(p),(h=parseFloat(h))&&(p+=h=parseFloat(h),d+=h),d||p?(d*=lo,p*=lo,n=Math.cos(d)*m,r=Math.sin(d)*m,i=Math.sin(d-p)*-g,o=Math.cos(d-p)*g,p&&(h*=lo,a=Math.tan(p-h),i*=a=Math.sqrt(1+a*a),o*=a,h&&(a=Math.tan(h),n*=a=Math.sqrt(1+a*a),r*=a)),n=Vn(n),r=Vn(r),i=Vn(i),o=Vn(o)):(n=m,o=g,r=i=0),(k&&!~(l+"").indexOf("px")||x&&!~(f+"").indexOf("px"))&&(k=$o(_,"x",l,"px"),x=$o(_,"y",f,"px")),(v||y||b||w)&&(k=Vn(k+v-(v*n+y*i)+b),x=Vn(x+y-(v*r+y*o)+w)),(u||c)&&(a=_.getBBox(),k=Vn(k+u/100*a.width),x=Vn(x+c/100*a.height)),a="matrix("+n+","+r+","+i+","+o+","+k+","+x+")",_.setAttribute("transform",a),T&&(_.style[Co]=a)},ma=function(t,e,n,r,i){var o,a,s=360,u=rn(i),c=parseFloat(i)*(u&&~i.indexOf("rad")?co:1)-r,l=r+c+"deg";return u&&("short"===(o=i.split("_")[1])&&(c%=s)!==c%180&&(c+=c<0?s:-360),"cw"===o&&c<0?c=(c+36e9)%s-~~(c/s)*s:"ccw"===o&&c>0&&(c=(c-36e9)%s-~~(c/s)*s)),t._pt=a=new qi(t._pt,e,n,r,c,vo),a.e=l,a.u="deg",t._props.push(n),a},ga=function(t,e){for(var n in e)t[n]=e[n];return t},_a=function(t,e,n){var r,i,o,a,s,u,c,l=ga({},n._gsap),f=n.style;for(i in l.svg?(o=n.getAttribute("transform"),n.setAttribute("transform",""),f[Co]=e,r=aa(n,1),Wo(n,Co),n.setAttribute("transform",o)):(o=getComputedStyle(n)[Co],f[Co]=e,r=aa(n,1),f[Co]=o),uo)(o=l[i])!==(a=r[i])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(i)<0&&(s=Sr(o)!==(c=Sr(a))?$o(n,i,o,c):parseFloat(o),u=parseFloat(a),t._pt=new qi(t._pt,r,i,s,u-s,_o),t._pt.u=c||0,t._props.push(i));ga(r,l)};zn("padding,margin,Width,Radius",(function(t,e){var n="Top",r="Right",i="Bottom",o="Left",a=(e<3?[n,r,i,o]:[n+o,n+r,i+r,i+o]).map((function(n){return e<2?t+n:"border"+n+t}));Qo[e>1?"border"+t:t]=function(t,e,n,r,i){var o,s;if(arguments.length<4)return o=a.map((function(e){return Go(t,e,n)})),5===(s=o.join(" ")).split(o[0]).length?o[0]:s;o=(r+"").split(" "),s={},a.forEach((function(t,e){return s[t]=o[e]=o[e]||o[(e-1)/2|0]})),t.init(e,s,i)}}));var va,ya,ba,wa={name:"css",register:jo,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,n,r,i){var o,a,s,u,c,l,f,d,p,h,m,g,_,v,y,b,w,T,k,x,E=this._props,S=t.style,O=n.vars.startAt;for(f in ro||jo(),this.styles=this.styles||Ro(t),b=this.styles.props,this.tween=n,e)if("autoRound"!==f&&(a=e[f],!Rn[f]||!bi(f,e,n,r,t,i)))if(c=typeof a,l=Qo[f],"function"===c&&(c=typeof(a=a.call(n,r,t,i))),"string"===c&&~a.indexOf("random(")&&(a=Fr(a)),l)l(this,t,f,a,n)&&(y=1);else if("--"===f.substr(0,2))o=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",Zr.lastIndex=0,Zr.test(o)||(d=Sr(o),p=Sr(a)),p?d!==p&&(o=$o(t,f,o,p)+p):d&&(a+=d),this.add(S,"setProperty",o,a,r,i,0,0,f),E.push(f),b.push(f,0,S[f]);else if("undefined"!==c){if(O&&f in O?(o="function"==typeof O[f]?O[f].call(n,r,t,i):O[f],rn(o)&&~o.indexOf("random(")&&(o=Fr(o)),Sr(o+"")||"auto"===o||(o+=Ye.units[f]||Sr(Go(t,f))||""),"="===(o+"").charAt(1)&&(o=Go(t,f))):o=Go(t,f),u=parseFloat(o),(h="string"===c&&"="===a.charAt(1)&&a.substr(0,2))&&(a=a.substr(2)),s=parseFloat(a),f in go&&("autoAlpha"===f&&(1===u&&"hidden"===Go(t,"visibility")&&s&&(u=0),b.push("visibility",0,S.visibility),Ho(this,S,"visibility",u?"inherit":"hidden",s?"inherit":"hidden",!s)),"scale"!==f&&"transform"!==f&&~(f=go[f]).indexOf(",")&&(f=f.split(",")[0])),m=f in uo)if(this.styles.save(f),g||((_=t._gsap).renderTransform&&!e.parseTransform||aa(t,e.parseTransform),v=!1!==e.smoothOrigin&&_.smooth,(g=this._pt=new qi(this._pt,S,Co,0,1,_.renderTransform,_,0,-1)).dep=1),"scale"===f)this._pt=new qi(this._pt,_,"scaleY",_.scaleY,(h?Hn(_.scaleY,h+s):s)-_.scaleY||0,_o),this._pt.u=0,E.push("scaleY",f),f+="X";else{if("transformOrigin"===f){b.push(Ao,0,S[Ao]),T=void 0,k=void 0,x=void 0,T=(w=a).split(" "),k=T[0],x=T[1]||"50%","top"!==k&&"bottom"!==k&&"left"!==x&&"right"!==x||(w=k,k=x,x=w),T[0]=Zo[k]||k,T[1]=Zo[x]||x,a=T.join(" "),_.svg?oa(t,a,0,v,0,this):((p=parseFloat(a.split(" ")[2])||0)!==_.zOrigin&&Ho(this,_,"zOrigin",_.zOrigin,p),Ho(this,S,f,sa(o),sa(a)));continue}if("svgOrigin"===f){oa(t,a,1,v,0,this);continue}if(f in ea){ma(this,_,f,u,h?Hn(u,h+a):a);continue}if("smoothOrigin"===f){Ho(this,_,"smooth",_.smooth,a);continue}if("force3D"===f){_[f]=a;continue}if("transform"===f){_a(this,a,t);continue}}else f in S||(f=Fo(f)||f);if(m||(s||0===s)&&(u||0===u)&&!mo.test(a)&&f in S)s||(s=0),(d=(o+"").substr((u+"").length))!==(p=Sr(a)||(f in Ye.units?Ye.units[f]:d))&&(u=$o(t,f,o,p)),this._pt=new qi(this._pt,m?_:S,f,u,(h?Hn(u,h+s):s)-u,m||"px"!==p&&"zIndex"!==f||!1===e.autoRound?_o:bo),this._pt.u=p||0,d!==p&&"%"!==p&&(this._pt.b=o,this._pt.r=yo);else if(f in S)Xo.call(this,t,f,o,h?h+a:a);else if(f in t)this.add(t,f,o||t[f],h?h+a:a,r,i);else if("parseTransform"!==f){xn(f,a);continue}m||(f in S?b.push(f,0,S[f]):b.push(f,1,o||t[f])),E.push(f)}y&&ji(this)},render:function(t,e){if(e.tween._time||!ao())for(var n=e._pt;n;)n.r(t,n.d),n=n._next;else e.styles.revert()},get:Go,aliases:go,getSetter:function(t,e,n){var r=go[e];return r&&r.indexOf(",")<0&&(e=r),e in uo&&e!==Ao&&(t._gsap.x||Go(t,"x"))?n&&oo===n?"scale"===e?So:Eo:(oo=n||{})&&("scale"===e?Oo:Bo):t.style&&!sn(t.style[e])?ko:~e.indexOf("-")?xo:Ii(t,e)},core:{_removeProperty:Wo,_getMatrix:ia}};Qi.utils.checkPrefix=Fo,Qi.core.getStyleSaver=Ro,ba=zn((va="x,y,z,scale,scaleX,scaleY,xPercent,yPercent")+","+(ya="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){uo[t]=1})),zn(ya,(function(t){Ye.units[t]="deg",ea[t]=1})),go[ba[13]]=va+","+ya,zn("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");go[e[1]]=ba[e[0]]})),zn("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){Ye.units[t]="px"})),Qi.registerPlugin(wa);var Ta,ka,xa,Ea,Sa,Oa,Ba,Ca=Qi.registerPlugin(wa)||Qi;Ca.core.Tween;!function(t){t.WORK="work",t.READINESS="readiness",t.BREAK="break",t.PAUSE="pause"}(Ta||(Ta={})),function(t){t.START="start",t.PAUSE="pause",t.CONTINUE="continue",t.START_BREAK="start-break",t.PAUSE_BREAK="pause-break",t.CONTINUE_BREAK="continue-break"}(ka||(ka={})),function(t){t.STOP="stop",t.SKIP_BREAK="skip-break",t.DONE="done"}(xa||(xa={})),function(t){t.INACTIVE="inactive",t.INACTIVE_BREAK="inactive-break",t.ACTIVE_INCOMPLETE="active-incomplete",t.ACTIVE_COMPLETE="active-complete"}(Ea||(Ea={})),function(t){t.ON="on",t.OFF="off"}(Sa||(Sa={})),function(t){t.TOMATO_TIME="tomato-time",t.SHORT_BREAK_TIME="short-break-time",t.LONG_BREAK_TIME="long-break-time",t.FREQUENCY_OF_LONG_BREAK="frequency-of-long-break"}(Oa||(Oa={}));class Aa{static timeElement=document.querySelector(".app__task-time");static addTimeBtn=document.querySelector(".app__task-add-time");static timeEndSound=document.createElement("audio");static breakTimeEndSound=document.createElement("audio");static firstBtn=document.querySelector(".app__task-first-btn");static secondBtn=document.querySelector(".app__task-second-btn");static __defaultTime=1500;static __defaultShortBreakTime=300;static __defaultLongBreakTime=900;static __noticesStatus=Sa.ON;static __frequencyOfLongBreak=4;static taskCurrentTomato=1;static timeStatus=Ta.READINESS;static firstBtnStatus=ka.START;static secondBtnStatus=xa.STOP;static getCurrentTaskId(){const t=localStorage.getItem("current-task-id");return t||(Aa.taskInfo?Aa.taskInfo.id:null)}static updateTaskInfo(t){if(Aa.taskInfo=t,Aa.timeStatus!==Ta.BREAK){const t=document.querySelector(".app__task-title");t&&(t.textContent=Aa.taskInfo.name)}}static createSettingsMenu(){const t=document.querySelector(".app__task-settings-trigger"),e=document.createElement("div");e.classList.add("app__task-settings-menu");const n=document.createElement("button"),r=document.createElement("button"),i=document.createElement("button"),o=document.createElement("button"),a=document.createElement("div"),s=document.createElement("button");n.classList.add("app__task-settings-btn"),r.classList.add("app__task-settings-btn"),i.classList.add("app__task-settings-btn"),o.classList.add("app__task-settings-btn"),a.classList.add("app__task-settings-switching-notices-wrapper"),s.classList.add("app__task-settings-switching-notices-btn"),n.textContent="изменить время помидора",r.textContent="изменить время короткого перерыва",i.textContent="изменить время длинного перерыва",o.textContent="изменить чистоту длинного перерыва",a.textContent="уведомления";const u=localStorage.getItem("settings-notices");u?"on"===u?(s.classList.add("app__task-settings-switching-notices-btn--on"),Aa.timeEndSound.muted=!1,Aa.breakTimeEndSound.muted=!1):"off"===u&&(s.classList.remove("app__task-settings-switching-notices-btn--on"),Aa.timeEndSound.muted=!0,Aa.breakTimeEndSound.muted=!0):s.classList.add("app__task-settings-switching-notices-btn--on"),s.addEventListener("click",(()=>{Aa.__noticesStatus===Sa.ON?(localStorage.setItem("settings-notices",Sa.OFF),Aa.__noticesStatus=Sa.OFF,s.classList.remove("app__task-settings-switching-notices-btn--on"),Aa.timeEndSound.muted=!0,Aa.breakTimeEndSound.muted=!0):Aa.__noticesStatus===Sa.OFF&&(localStorage.setItem("settings-notices",Sa.ON),Aa.__noticesStatus=Sa.ON,s.classList.add("app__task-settings-switching-notices-btn--on"),Aa.timeEndSound.muted=!1,Aa.breakTimeEndSound.muted=!1)})),s.append(document.createElement("span")),a.prepend(s),e.append(n),e.append(r),e.append(i),e.append(o),e.append(a),t&&me(t,{content:e,placement:"bottom",interactive:!0,animation:"shift-toward",trigger:"click",offset:[-89,15]});const c=Aa.createWrapperForSettingsChanging(Oa.TOMATO_TIME,n.offsetHeight),l=Aa.createWrapperForSettingsChanging(Oa.SHORT_BREAK_TIME,r.offsetHeight),f=Aa.createWrapperForSettingsChanging(Oa.LONG_BREAK_TIME,i.offsetHeight),d=Aa.createWrapperForSettingsChanging(Oa.FREQUENCY_OF_LONG_BREAK,o.offsetHeight);me(n,{content:c,placement:"left",interactive:!0,animation:"shift-toward",trigger:"click",offset:[0,15]}),me(r,{content:l,placement:"left",interactive:!0,animation:"shift-toward",trigger:"click",offset:[0,15]}),me(i,{content:f,placement:"left",interactive:!0,animation:"shift-toward",trigger:"click",offset:[0,15]}),me(o,{content:d,placement:"left",interactive:!0,animation:"shift-toward",trigger:"click",offset:[0,15]})}static createWrapperForSettingsChanging(t,e){const n=document.createElement("div"),r=document.createElement("input");n.classList.add("app__task-settings-changing-wrapper"),r.classList.add("app__task-settings-changing-input");const i=document.createElement("button"),o=document.createElementNS("http://www.w3.org/2000/svg","svg"),a=document.createElementNS("http://www.w3.org/2000/svg","use");return i.classList.add("app__task-settings-changing-confirm"),Ca.set(r,{height:e}),a.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#confirm-changing"),o.append(a),i.append(o),n.append(r),n.append(i),t===Oa.TOMATO_TIME?(r.placeholder=`в минутах(текущ. ${Aa.__defaultTime})`,i.addEventListener("click",(()=>{Aa.__defaultTime=Number(r.value.replace(/[^0-9]/g,"")),Aa.setTimeByDefault(),localStorage.setItem("settings-default-time",Aa.__defaultTime.toString())}))):t===Oa.SHORT_BREAK_TIME?(r.placeholder=`в минутах(текущ. ${Aa.__defaultShortBreakTime})`,i.addEventListener("click",(()=>{Aa.__defaultShortBreakTime=Number(r.value.replace(/[^0-9]/g,"")),Aa.setBreakTimeByDefault(),localStorage.setItem("settings-default-short-break-time",Aa.__defaultShortBreakTime.toString())}))):t===Oa.LONG_BREAK_TIME?(r.placeholder=`в минутах(текущ. ${Aa.__defaultLongBreakTime})`,i.addEventListener("click",(()=>{Aa.__defaultLongBreakTime=Number(r.value.replace(/[^0-9]/g,"")),Aa.setBreakTimeByDefault(),localStorage.setItem("settings-default-long-break-time",Aa.__defaultLongBreakTime.toString())}))):t===Oa.FREQUENCY_OF_LONG_BREAK&&(r.placeholder=`(текущ. ${Aa.__frequencyOfLongBreak})`,i.addEventListener("click",(()=>{Aa.__frequencyOfLongBreak=Number(r.value.replace(/[^0-9]/g,"")),localStorage.setItem("settings-default-frequency-of-long-break",Aa.__frequencyOfLongBreak.toString())}))),i.addEventListener("click",(()=>{he()})),r.addEventListener("keypress",(t=>{"Enter"===t.key&&i.click()})),n}static defaultResetBeforeReadiness(){Aa.firstBtnStatus=ka.START,Aa.secondBtnStatus=xa.STOP,Aa.addTimeBtn&&(Aa.addTimeBtn.disabled=!1),Aa.firstBtn&&(Aa.firstBtn.disabled=!1,Aa.firstBtn.textContent="Старт"),Aa.secondBtn&&(Aa.secondBtn.disabled=!0,Aa.secondBtn&&(Aa.secondBtn.textContent="Стоп")),clearInterval(Aa.TimeInterval),Aa.setTimeByDefault(),Aa.timeEndSound.remove(),Aa.breakTimeEndSound.remove(),Aa.taskCurrentTomato=1,Ca.set(Aa.timeElement,{fontSize:150})}static setTaskForReadiness(t){const e=Number(localStorage.getItem("settings-default-time")),n=Number(localStorage.getItem("settings-default-short-break-time")),r=Number(localStorage.getItem("settings-default-long-break-time")),i=Number(localStorage.getItem("settings-default-frequency-of-long-break"));e&&(Aa.__defaultTime=e),n&&(Aa.__defaultShortBreakTime=n),r&&(Aa.__defaultLongBreakTime=r),i&&(Aa.__frequencyOfLongBreak=i);const o=localStorage.getItem("current-task-status"),a=Number(localStorage.getItem("current-task-time"));if(Aa.timeStatus===Ta.READINESS)if(o===Ea.ACTIVE_COMPLETE)Ia.removeTaskById(t.id);else{Aa.taskInfo=t;const e=Number(localStorage.getItem("current-task-tomato"));e&&(Aa.taskCurrentTomato=e);const n=document.querySelector(".app__task-title"),r=document.querySelector(".app__task-current-tomato");n&&(n.textContent=t.name),r&&(r.textContent=`Помидор: ${Aa.taskCurrentTomato}`),o===Ea.ACTIVE_INCOMPLETE?(Aa.timeStatus=Ta.PAUSE,Aa.currentTime=a,Aa.timeElement&&(Aa.timeElement.textContent=Aa.getNormalTimeFormat()),a!==Aa.__defaultTime&&Aa.firstBtn&&Aa.secondBtn?(Aa.firstBtn.textContent="Продолжить",Aa.firstBtnStatus=ka.CONTINUE,Aa.secondBtn.disabled=!1,Aa.secondBtn.textContent="Сделано",Aa.secondBtnStatus=xa.DONE):(Aa.firstBtn&&(Aa.firstBtn.textContent="Старт"),Aa.secondBtn&&(Aa.secondBtn.textContent="Стоп"),Aa.secondBtn&&(Aa.secondBtn.disabled=!0))):o===Ea.INACTIVE_BREAK?(Aa.timeStatus=Ta.BREAK,n&&(n.textContent="Перерыв"),Aa.currentTime=a,Aa.timeElement&&(Aa.timeElement.textContent=Aa.getNormalTimeFormat()),a!==Aa.__defaultShortBreakTime&&Aa.firstBtn&&Aa.secondBtn?(Aa.firstBtn.textContent="Продолжить",Aa.firstBtnStatus=ka.CONTINUE_BREAK,Aa.secondBtn.disabled=!1,Aa.secondBtn.textContent="Пропустить",Aa.secondBtnStatus=xa.SKIP_BREAK):(Aa.firstBtnStatus=ka.START_BREAK,Aa.firstBtn&&(Aa.firstBtn.textContent="Старт"),Aa.secondBtnStatus=xa.SKIP_BREAK,Aa.secondBtn&&(Aa.secondBtn.textContent="Стоп"),Aa.secondBtn&&(Aa.secondBtn.disabled=!0))):Aa.defaultResetBeforeReadiness(),Aa.firstBtn&&(Aa.firstBtn.disabled=!1,Aa.firstBtn.onclick=()=>{Aa.firstBtnStatus===ka.START?Aa.start():Aa.firstBtnStatus===ka.PAUSE?Aa.pause():Aa.firstBtnStatus===ka.CONTINUE?Aa.continue():Aa.firstBtnStatus===ka.START_BREAK?Aa.startBreak():Aa.firstBtnStatus===ka.PAUSE_BREAK?Aa.pauseBreak():Aa.firstBtnStatus===ka.CONTINUE_BREAK&&Aa.continueBreak(),Aa.secondBtn&&(Aa.secondBtn.disabled=!1)}),Aa.secondBtn&&(Aa.secondBtn.onclick=()=>{Aa.secondBtnStatus===xa.STOP?Aa.stop():Aa.secondBtnStatus===xa.DONE?Aa.done():Aa.secondBtnStatus===xa.SKIP_BREAK&&Aa.skipBreak()}),Aa.addTimeBtn&&(Aa.addTimeBtn.onclick=()=>{Aa.addTimeForCurrentTask(60)}),localStorage.setItem("current-task-time",Aa.currentTime.toString()),localStorage.setItem("current-task-tomato",Aa.taskCurrentTomato.toString()),localStorage.setItem("current-task-id",Aa.taskInfo.id)}}static clearReadiness(){Aa.defaultResetBeforeReadiness();const t=document.querySelector(".app__task-title"),e=document.querySelector(".app__task-current-tomato");t&&(t.textContent="Добавьте или выберите задачу"),e&&(e.textContent=""),Aa.addTimeBtn&&(Aa.addTimeBtn.disabled=!0),Aa.firstBtn&&(Aa.firstBtn.disabled=!0,Aa.firstBtn.textContent="Старт"),Aa.secondBtn&&(Aa.secondBtn.disabled=!0,Aa.secondBtn.textContent="Стоп"),localStorage.removeItem("current-task-status"),localStorage.removeItem("current-task-time"),localStorage.removeItem("current-task-id"),localStorage.removeItem("current-task-tomato")}static setTimeByDefault(){Aa.currentTime=Aa.__defaultTime,Aa.timeStatus===Ta.READINESS&&Aa.timeElement&&(Aa.timeElement.textContent=Aa.getNormalTimeFormat()),localStorage.setItem("current-task-time",Aa.currentTime.toString())}static addTimeForCurrentTask(t){Aa.currentTime+=t,Aa.timeElement&&(Aa.timeElement.textContent=Aa.getNormalTimeFormat()),localStorage.setItem("current-task-time",Aa.currentTime.toString())}static getNormalTimeFormat(){let t=0,e=0,n=Aa.currentTime;if(n>59){for(;n>59;)t+=1,n-=60;return e=n,e>9?`${t}:${e}`:`${t}:0${e}`}return e=n,e.toString()}static tick(){Aa.timeStatus!==Ta.WORK&&Aa.timeStatus!==Ta.BREAK||(clearInterval(Aa.TimeInterval),Aa.timeElement&&(Aa.currentTime-=1,Aa.timeElement.textContent=Aa.getNormalTimeFormat(),localStorage.setItem("current-task-time",Aa.currentTime.toString())),Aa.TimeInterval=setInterval((()=>{Aa.currentTime<=0?Aa.timeStatus===Ta.BREAK?Aa.breakCompleted():Aa.tomatoOrTaskCompleted():Aa.timeElement&&(Aa.currentTime-=1,Aa.timeElement.textContent=Aa.getNormalTimeFormat(),localStorage.setItem("current-task-time",Aa.currentTime.toString()))}),1e3))}static start(){localStorage.setItem("current-task-status",Ea.ACTIVE_INCOMPLETE),Aa.firstBtnStatus=ka.PAUSE,Aa.timeStatus=Ta.WORK,Aa.breakTimeEndSound.remove(),Ca.set(Aa.timeElement,{fontSize:150}),Aa.firstBtn&&(Aa.firstBtn.textContent="Пауза");const t=document.querySelector(".app__task-title"),e=document.querySelector(".app__task-current-tomato");t&&(t.textContent=Aa.taskInfo.name),e&&(e.textContent=`Помидор: ${Aa.taskCurrentTomato}`),Aa.addTimeBtn&&(Aa.addTimeBtn.disabled=!1),Aa.tick()}static continue(){Aa.timeStatus=Ta.WORK,Aa.firstBtnStatus=ka.PAUSE,Aa.secondBtnStatus=xa.STOP,Aa.firstBtn&&(Aa.firstBtn.textContent="Пауза"),Aa.secondBtn&&(Aa.secondBtn.textContent="Стоп"),Aa.tick()}static pause(){Aa.timeStatus=Ta.PAUSE,Aa.firstBtnStatus=ka.CONTINUE,Aa.secondBtnStatus=xa.DONE,Aa.firstBtn&&(Aa.firstBtn.textContent="Продолжить"),Aa.secondBtn&&(Aa.secondBtn.textContent="Сделано"),clearInterval(Aa.TimeInterval)}static stop(){clearInterval(Aa.TimeInterval),localStorage.setItem("current-task-status",Ea.INACTIVE),Aa.timeStatus=Ta.READINESS,Aa.firstBtnStatus=ka.START,Aa.firstBtn&&(Aa.firstBtn.textContent="Старт"),Aa.secondBtn&&(Aa.secondBtn.disabled=!0),Aa.setTimeByDefault()}static done(){Aa.timeStatus=Ta.READINESS,Aa.timeEndSound.remove(),Ia.removeTaskById(Aa.taskInfo.id)}static tomatoOrTaskCompleted(){clearInterval(Aa.TimeInterval),localStorage.setItem("current-task-time",Aa.__defaultTime.toString());const t=Number(localStorage.getItem("tomato-passed"));t?localStorage.setItem("tomato-passed",(t+1).toString()):localStorage.setItem("tomato-passed","1"),Aa.playTimeEndSound(),Aa.taskInfo.tomatoCount-=1,Aa.addTimeBtn&&(Aa.addTimeBtn.disabled=!0),Ca.set(Aa.timeElement,{fontSize:90}),Aa.timeElement&&(Aa.timeElement.textContent="Время вышло");const e=document.querySelector(".app__task-title");Aa.taskInfo.tomatoCount<=0?(localStorage.setItem("current-task-status",Ea.ACTIVE_COMPLETE),Aa.timeStatus=Ta.READINESS,Aa.firstBtnStatus=ka.START,Aa.secondBtnStatus=xa.DONE,e&&(e.textContent="Задача завершена"),Aa.firstBtn&&(Aa.firstBtn.textContent="Старт"),Aa.firstBtn&&(Aa.firstBtn.disabled=!0),Aa.secondBtn&&(Aa.secondBtn.textContent="Завершить")):(localStorage.setItem("current-task-status",Ea.INACTIVE_BREAK),localStorage.setItem("current-task-time",Aa.__defaultShortBreakTime.toString()),Aa.timeStatus=Ta.BREAK,Aa.firstBtnStatus=ka.START_BREAK,Aa.secondBtnStatus=xa.DONE,e&&(e.textContent=`${Aa.taskCurrentTomato} помидор истёк`),Aa.taskCurrentTomato+=1,localStorage.setItem("current-task-tomato",Aa.taskCurrentTomato.toString()),Aa.firstBtn&&(Aa.firstBtn.textContent="Перерыв"),Aa.secondBtn&&(Aa.secondBtn.textContent="Завершить"),Ia.updateTomatoCountById(Aa.taskInfo.id))}static setBreakTimeByDefault(){const t=Number(localStorage.getItem("tomato-passed"));t&&t>=Aa.__frequencyOfLongBreak?(Aa.currentTime=Aa.__defaultLongBreakTime,localStorage.setItem("tomato-passed","0")):Aa.currentTime=Aa.__defaultShortBreakTime,Aa.timeStatus===Ta.READINESS&&Aa.timeElement&&(Aa.timeElement.textContent=Aa.getNormalTimeFormat()),localStorage.setItem("current-task-time",Aa.currentTime.toString())}static startBreak(){Aa.timeEndSound.remove(),Aa.setBreakTimeByDefault();const t=document.querySelector(".app__task-title");Aa.currentTime===Aa.__defaultShortBreakTime?t&&(t.textContent="Перерыв"):t&&(t.textContent="Длинный перерыв"),Ca.set(Aa.timeElement,{fontSize:150}),Aa.timeStatus=Ta.BREAK,Aa.firstBtnStatus=ka.PAUSE_BREAK,Aa.secondBtnStatus=xa.SKIP_BREAK,Aa.firstBtn&&(Aa.firstBtn.textContent="Пауза"),Aa.secondBtn&&(Aa.secondBtn.textContent="Пропустить"),Aa.addTimeBtn&&(Aa.addTimeBtn.disabled=!1),Aa.timeElement&&(Aa.timeElement.textContent=Aa.getNormalTimeFormat()),Aa.tick()}static continueBreak(){Aa.timeStatus=Ta.BREAK,Aa.firstBtnStatus=ka.PAUSE_BREAK,Aa.firstBtn&&(Aa.firstBtn.textContent="Пауза"),Aa.tick()}static pauseBreak(){clearInterval(Aa.TimeInterval),Aa.timeStatus=Ta.BREAK,Aa.firstBtnStatus=ka.CONTINUE_BREAK,Aa.firstBtn&&(Aa.firstBtn.textContent="Продолжить")}static skipBreak(){clearInterval(Aa.TimeInterval),Aa.setTimeByDefault(),Aa.firstBtnStatus=ka.PAUSE,Aa.secondBtnStatus=xa.STOP,Aa.firstBtn&&(Aa.firstBtn.textContent="пауза"),Aa.secondBtn&&(Aa.secondBtn.textContent="Стоп"),Aa.start()}static breakCompleted(){clearInterval(Aa.TimeInterval),Aa.playBreakTimeEndSound(),Aa.setTimeByDefault(),Aa.addTimeBtn&&(Aa.addTimeBtn.disabled=!0),Ca.set(Aa.timeElement,{fontSize:90}),Aa.timeElement&&(Aa.timeElement.textContent="Время вышло");const t=document.querySelector(".app__task-title");t&&(t.textContent="Перерыв окончен"),Aa.firstBtnStatus=ka.START,Aa.secondBtnStatus=xa.STOP,Aa.firstBtn&&(Aa.firstBtn.textContent="Старт"),Aa.secondBtn&&(Aa.secondBtn.textContent="Стоп"),Aa.secondBtn&&(Aa.secondBtn.disabled=!0)}static playTimeEndSound(){Aa.timeEndSound.src=Be,Aa.timeEndSound.loop=!0,document.body.append(Aa.timeEndSound),Aa.timeEndSound.play()}static playBreakTimeEndSound(){Aa.breakTimeEndSound.src=Ce,Aa.breakTimeEndSound.loop=!0,document.body.append(Aa.breakTimeEndSound),Aa.breakTimeEndSound.play()}}class Ia{tomatoCountElement=null;nameElement=null;taskWrapper=null;constructor(t){this.taskInfo=t}static createDefaultTaskInfo(t){return{name:t,tomatoCount:1,id:Te()}}static getFullTasksTime(){if(localStorage.getItem("tasks")){const t=JSON.parse(localStorage.getItem("tasks"));let e=Object.values(t).reduce(((t,e)=>t+25*e.tomatoCount),0),n=0;for(;e>59;)n+=1,e-=60;return n>0?`${n} ч. ${e} мин.`:`${e} мин.`}return null}static updateFullTimeElement(){const t=document.querySelector(".app__task-list-full-time");null!==this.getFullTasksTime()?t&&(t.textContent=this.getFullTasksTime()):t&&(t.textContent="")}saveTaskInLocalStorage(){const t=localStorage.getItem("tasks")?JSON.parse(localStorage.getItem("tasks")):{};t[this.taskInfo.id]=this.taskInfo,localStorage.setItem("tasks",JSON.stringify(t))}removeTaskInLocalStorage(){localStorage.removeItem("current-task-status"),localStorage.removeItem("current-task-time"),localStorage.removeItem("current-task-tomato"),localStorage.removeItem("current-task-id");const t=localStorage.getItem("tasks")?JSON.parse(localStorage.getItem("tasks")):{};delete t[this.taskInfo.id],this.taskInfo.id===Aa.getCurrentTaskId()&&(Object.values(t)[0]?Aa.setTaskForReadiness(Object.values(t)[0]):Aa.clearReadiness()),Object.values(t)[0]?localStorage.setItem("tasks",JSON.stringify(t)):localStorage.removeItem("tasks")}static removeTaskInLocalStorageById(t){localStorage.removeItem("current-task-status"),localStorage.removeItem("current-task-time"),localStorage.removeItem("current-task-tomato"),localStorage.removeItem("current-task-id");const e=localStorage.getItem("tasks")?JSON.parse(localStorage.getItem("tasks")):{};delete e[t],t===Aa.getCurrentTaskId()&&(Object.values(e)[0]?Aa.setTaskForReadiness(Object.values(e)[0]):Aa.clearReadiness()),Object.values(e)[0]?localStorage.setItem("tasks",JSON.stringify(e)):localStorage.removeItem("tasks")}createTaskElement(){this.taskWrapper=document.createElement("li");const t=document.createElement("button"),e=this.createConfigurationMenu();return this.tomatoCountElement=document.createElement("span"),this.nameElement=document.createElement("span"),this.taskWrapper.classList.add("app__task-list-item"),this.tomatoCountElement.classList.add("app__task-list-tomato-count"),this.nameElement.classList.add("app__task-list-name"),t.classList.add("app__task-list-configuration-trigger"),this.taskWrapper.setAttribute("data-id",this.taskInfo.id),this.nameElement.textContent=this.taskInfo.name,this.tomatoCountElement.textContent=this.taskInfo.tomatoCount.toString(),this.taskWrapper.setAttribute("tabindex","0"),this.taskWrapper.addEventListener("click",(t=>{const e=Aa.getCurrentTaskId();localStorage.getItem("current-task-status")===Ea.ACTIVE_COMPLETE&&null!==e&&Ia.removeTaskById(e),t.target!==this.taskWrapper&&t.target!==this.tomatoCountElement&&t.target!==this.nameElement||Aa.setTaskForReadiness(this.taskInfo)})),this.taskWrapper.addEventListener("keypress",(t=>{const e=Aa.getCurrentTaskId();localStorage.getItem("current-task-status")===Ea.ACTIVE_COMPLETE&&null!==e&&Ia.removeTaskById(e),"Enter"===t.key&&Aa.setTaskForReadiness(this.taskInfo)})),me(t,{content:e,placement:"bottom",interactive:!0,animation:"shift-toward",trigger:"mouseenter click",offset:[0,15]}),t.append(document.createElement("span")),t.append(document.createElement("span")),t.append(document.createElement("span")),this.taskWrapper.append(this.tomatoCountElement),this.taskWrapper.append(this.nameElement),this.taskWrapper.append(t),this.saveTaskInLocalStorage(),Ia.updateFullTimeElement(),this.taskWrapper}updateTaskElement(){Ia.updateFullTimeElement(),this.tomatoCountElement&&(this.tomatoCountElement.textContent=this.taskInfo.tomatoCount.toString()),this.nameElement&&(this.nameElement.textContent=this.taskInfo.name),this.taskInfo.id===Aa.getCurrentTaskId()&&Aa.updateTaskInfo(this.taskInfo)}static updateTomatoCountById(t){const e=localStorage.getItem("tasks")?JSON.parse(localStorage.getItem("tasks")):{},n=e[t];n.tomatoCount-=1,e[t]=n,localStorage.setItem("tasks",JSON.stringify(e)),Ia.updateFullTimeElement();const r=document.querySelector(`.app__task-list-item[data-id="${t}"]`),i=r?r.querySelector(".app__task-list-tomato-count"):null;i&&(i.textContent=n.tomatoCount.toString())}createConfigurationMenu(){const t=document.createElement("div"),e=document.createElement("button"),n=document.createElement("button"),r=document.createElement("button"),i=document.createElement("button");t.classList.add("app__task-list-configuration-menu"),e.classList.add("app__task-list-configuration-btn"),n.classList.add("app__task-list-configuration-btn"),r.classList.add("app__task-list-configuration-btn"),i.classList.add("app__task-list-configuration-btn"),e.textContent="Увеличить",n.textContent="Уменьшить",r.textContent="Редактировать",i.textContent="Удалить",this.taskInfo.tomatoCount+1===10&&(e.disabled=!0),this.taskInfo.tomatoCount-1==0&&(n.disabled=!0);const o=document.createElementNS("http://www.w3.org/2000/svg","svg"),a=document.createElementNS("http://www.w3.org/2000/svg","svg"),s=document.createElementNS("http://www.w3.org/2000/svg","svg"),u=document.createElementNS("http://www.w3.org/2000/svg","svg"),c=document.createElementNS("http://www.w3.org/2000/svg","use"),l=document.createElementNS("http://www.w3.org/2000/svg","use"),f=document.createElementNS("http://www.w3.org/2000/svg","use"),d=document.createElementNS("http://www.w3.org/2000/svg","use");c.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#configuration-add-tomato"),l.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#configuration-remove-tomato"),f.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#configuration-edit"),d.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#configuration-remove-task"),o.append(c),a.append(l),s.append(f),u.append(d),e.prepend(o),n.prepend(a),r.prepend(s),i.prepend(u);const p=document.createElement("div"),h=document.createElement("input"),m=document.createElement("button"),g=document.createElementNS("http://www.w3.org/2000/svg","svg"),_=document.createElementNS("http://www.w3.org/2000/svg","use");return _.setAttributeNS("http://www.w3.org/1999/xlink","xlink:href","#confirm-changing"),p.classList.add("app__task-list-configuration-name-changing-wrapper"),h.classList.add("app__task-list-configuration-name-changing-input"),m.classList.add("app__task-list-configuration-name-changing-btn"),Ca.set(h,{height:r.offsetHeight}),h.placeholder="название задачи",g.append(_),m.append(g),p.append(h),p.append(m),me(r,{content:p,placement:"right",interactive:!0,animation:"shift-toward",trigger:"click",offset:[0,15]}),e.addEventListener("click",(()=>{n.disabled=!1,this.tomatoCountElement&&(this.taskInfo.tomatoCount<9?this.addTomato():e.disabled=!0,this.taskInfo.tomatoCount+1===10&&(e.disabled=!0))})),n.addEventListener("click",(()=>{e.disabled=!1,this.tomatoCountElement&&(this.taskInfo.tomatoCount>1?this.removeTomato():n.disabled=!0,this.taskInfo.tomatoCount-1==0&&(n.disabled=!0))})),h.addEventListener("keypress",(t=>{"Enter"===t.key&&m.click()})),i.addEventListener("click",(()=>{this.removeTask()})),m.addEventListener("click",(()=>{he(),this.editName(h.value.trim())})),t.append(e),t.append(n),t.append(r),t.append(i),t}addTomato(){this.taskInfo.tomatoCount+=1,this.saveTaskInLocalStorage(),this.updateTaskElement()}removeTomato(){this.taskInfo.tomatoCount-=1,this.saveTaskInLocalStorage(),this.updateTaskElement()}editName(t){this.taskInfo.name=t,this.saveTaskInLocalStorage(),this.updateTaskElement()}removeTask(){Aa.timeStatus=Ta.READINESS,this.taskWrapper?.remove(),this.removeTaskInLocalStorage(),Ia.updateFullTimeElement()}static removeTaskById(t){document.querySelector(`.app__task-list-item[data-id="${t}"]`)?.remove(),Ia.removeTaskInLocalStorageById(t),Ia.updateFullTimeElement()}}!function(t){t.DARK="dark",t.LIGHT="light"}(Ba||(Ba={}));class Ma{static changeTheme(t){t===Ba.DARK?(document.body.setAttribute("data-theme",Ba.DARK),localStorage.setItem("theme",Ba.DARK)):t===Ba.LIGHT&&(document.body.setAttribute("data-theme",Ba.LIGHT),localStorage.setItem("theme",Ba.LIGHT))}static getCurrentTheme(){const t=document.body.getAttribute("data-theme");return null!==t?t:"Нельзя получить текущую тему"}static setThemeFromLocalStorage(){const t=localStorage.getItem("theme");t&&(t===Ba.LIGHT?Ma.changeTheme(Ba.LIGHT):t===Ba.DARK&&Ma.changeTheme(Ba.DARK))}}document.addEventListener("DOMContentLoaded",(()=>{Ma.setThemeFromLocalStorage();const t=document.querySelector(".header__change-theme-btn");t&&t.addEventListener("click",(()=>{Ma.getCurrentTheme()===Ba.DARK?Ma.changeTheme(Ba.LIGHT):Ma.getCurrentTheme()===Ba.LIGHT&&Ma.changeTheme(Ba.DARK)}));const e=document.querySelector(".app__task-list-add-task"),n=document.querySelector(".app__task-list-input"),r=document.querySelector(".app__task-list");if(localStorage.getItem("tasks")){r&&(r.innerHTML="");const t=JSON.parse(localStorage.getItem("tasks"));Object.values(t).forEach((t=>{const e=new Ia(t);r?.append(e.createTaskElement()),e.taskInfo.id===Aa.getCurrentTaskId()&&Aa.setTaskForReadiness(e.taskInfo)}))}e&&n&&(n.addEventListener("input",(t=>{""!==t.currentTarget.value?null!==e&&(e.disabled=!1):null!==e&&(e.disabled=!0)})),n.addEventListener("keypress",(t=>{"Enter"===t.key&&e?.click()})),e.addEventListener("click",(()=>{const t=new Ia(Ia.createDefaultTaskInfo(n.value.trim()));r?.prepend(t.createTaskElement());const i=Aa.getCurrentTaskId();localStorage.getItem("current-task-status")===Ea.ACTIVE_COMPLETE&&i&&Ia.removeTaskById(i),Aa.setTaskForReadiness(t.taskInfo),n.value="",e.disabled=!0}))),Aa.createSettingsMenu()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,